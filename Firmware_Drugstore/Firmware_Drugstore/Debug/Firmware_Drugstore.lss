
Firmware_Drugstore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000eb4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000430  20000000  00000eb4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000080  20000430  000012e4  00020430  2**2
                  ALLOC
  3 .stack        00002000  200004b0  00001364  00020430  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020430  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020458  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000bcfe  00000000  00000000  000204b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a92  00000000  00000000  0002c1af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000ed5  00000000  00000000  0002cc41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000248  00000000  00000000  0002db16  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000001d8  00000000  00000000  0002dd5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001272c  00000000  00000000  0002df36  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000349b  00000000  00000000  00040662  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0007061c  00000000  00000000  00043afd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000678  00000000  00000000  000b411c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
   0:	200024b0 	.word	0x200024b0
   4:	0000047d 	.word	0x0000047d
   8:	00000479 	.word	0x00000479
   c:	00000479 	.word	0x00000479
	...
  2c:	00000479 	.word	0x00000479
	...
  38:	00000479 	.word	0x00000479
  3c:	00000479 	.word	0x00000479
  40:	00000479 	.word	0x00000479
  44:	00000479 	.word	0x00000479
  48:	00000479 	.word	0x00000479
  4c:	00000479 	.word	0x00000479
  50:	00000479 	.word	0x00000479
  54:	00000479 	.word	0x00000479
  58:	00000479 	.word	0x00000479
  5c:	00000479 	.word	0x00000479
  60:	00000479 	.word	0x00000479
  64:	00000479 	.word	0x00000479
  68:	00000479 	.word	0x00000479
  6c:	00000479 	.word	0x00000479
  70:	000009d1 	.word	0x000009d1
  74:	00000479 	.word	0x00000479
  78:	00000479 	.word	0x00000479
  7c:	00000479 	.word	0x00000479
  80:	00000479 	.word	0x00000479
  84:	00000479 	.word	0x00000479
  88:	00000479 	.word	0x00000479
  8c:	00000479 	.word	0x00000479
  90:	00000479 	.word	0x00000479
  94:	00000479 	.word	0x00000479
  98:	00000479 	.word	0x00000479
  9c:	00000479 	.word	0x00000479
  a0:	00000479 	.word	0x00000479
  a4:	00000479 	.word	0x00000479
  a8:	00000479 	.word	0x00000479
  ac:	00000479 	.word	0x00000479
  b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000430 	.word	0x20000430
  d4:	00000000 	.word	0x00000000
  d8:	00000eb4 	.word	0x00000eb4

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000434 	.word	0x20000434
 108:	00000eb4 	.word	0x00000eb4
 10c:	00000eb4 	.word	0x00000eb4
 110:	00000000 	.word	0x00000000

00000114 <read_rtc_register>:
	write_rtc_register(CONTROL2_REGISTER, 0x01);	//SQW Mode Selected on PIN FOUT/nIRQ (11)
	write_rtc_register(SQW_REGISTER, 0x8F);			//1Hz Output
}

uint8_t read_rtc_register(const uint8_t rtc_register)
{
 114:	b510      	push	{r4, lr}
	senddata[0] = rtc_register;
 116:	4b06      	ldr	r3, [pc, #24]	; (130 <read_rtc_register+0x1c>)
 118:	7018      	strb	r0, [r3, #0]
	
	i2c_write(&senddata,1);
 11a:	2101      	movs	r1, #1
 11c:	0018      	movs	r0, r3
 11e:	4b05      	ldr	r3, [pc, #20]	; (134 <read_rtc_register+0x20>)
 120:	4798      	blx	r3
	i2c_read(&recievedata,1);
 122:	4c05      	ldr	r4, [pc, #20]	; (138 <read_rtc_register+0x24>)
 124:	2101      	movs	r1, #1
 126:	0020      	movs	r0, r4
 128:	4b04      	ldr	r3, [pc, #16]	; (13c <read_rtc_register+0x28>)
 12a:	4798      	blx	r3
	
	return recievedata[0]; 
 12c:	7820      	ldrb	r0, [r4, #0]
}
 12e:	bd10      	pop	{r4, pc}
 130:	20000474 	.word	0x20000474
 134:	000005dd 	.word	0x000005dd
 138:	20000454 	.word	0x20000454
 13c:	00000655 	.word	0x00000655

00000140 <write_rtc_register>:

uint8_t write_rtc_register(const uint8_t rtc_register, const uint8_t data)
{
 140:	b510      	push	{r4, lr}
	senddata[0] = rtc_register;
 142:	4b04      	ldr	r3, [pc, #16]	; (154 <write_rtc_register+0x14>)
 144:	7018      	strb	r0, [r3, #0]
	senddata[1] = data;
 146:	7059      	strb	r1, [r3, #1]
	
	i2c_write(&senddata,2);
 148:	2102      	movs	r1, #2
 14a:	0018      	movs	r0, r3
 14c:	4b02      	ldr	r3, [pc, #8]	; (158 <write_rtc_register+0x18>)
 14e:	4798      	blx	r3
	
	return (1);
}
 150:	2001      	movs	r0, #1
 152:	bd10      	pop	{r4, pc}
 154:	20000474 	.word	0x20000474
 158:	000005dd 	.word	0x000005dd

0000015c <InitAB1805>:
#include "Includes/AB1805.h"
#include "Includes/settings.h"


void InitAB1805()
{
 15c:	b510      	push	{r4, lr}
	//CMDR = 2 / OFFSETR = 4222
	write_rtc_register(CAL_RC_HI_REGISTER, 0x90);		
 15e:	2190      	movs	r1, #144	; 0x90
 160:	2015      	movs	r0, #21
 162:	4c09      	ldr	r4, [pc, #36]	; (188 <InitAB1805+0x2c>)
 164:	47a0      	blx	r4
	//recievedata[3]=read_rtc_register(CAL_RC_HI_REGISTER);
	write_rtc_register(CAL_RC_LOW_REGISTER, 0x7E);
 166:	217e      	movs	r1, #126	; 0x7e
 168:	2016      	movs	r0, #22
 16a:	47a0      	blx	r4
	//recievedata[4]=read_rtc_register(CAL_RC_LOW_REGISTER);
	
	//Enable Oscillator Register (Key 0xA1)
	write_rtc_register(CONFIG_KEY_REGISTER,0xA1);
 16c:	21a1      	movs	r1, #161	; 0xa1
 16e:	201f      	movs	r0, #31
 170:	47a0      	blx	r4
	//Enable RC Oscillator
	write_rtc_register(0x1C,0x80);
 172:	2180      	movs	r1, #128	; 0x80
 174:	201c      	movs	r0, #28
 176:	47a0      	blx	r4
	
	//1Hz to Output Pin
	write_rtc_register(CONTROL2_REGISTER, 0x01);	//SQW Mode Selected on PIN FOUT/nIRQ (11)
 178:	2101      	movs	r1, #1
 17a:	2011      	movs	r0, #17
 17c:	47a0      	blx	r4
	write_rtc_register(SQW_REGISTER, 0x8F);			//1Hz Output
 17e:	218f      	movs	r1, #143	; 0x8f
 180:	2013      	movs	r0, #19
 182:	47a0      	blx	r4
}
 184:	bd10      	pop	{r4, pc}
 186:	46c0      	nop			; (mov r8, r8)
 188:	00000141 	.word	0x00000141

0000018c <get_second>:
{
	return (read_rtc_register(rtc_register) & register_mask);
}

uint8_t get_second(void)
{
 18c:	b510      	push	{r4, lr}
	return (1);
}

uint8_t get_rtc_data(const uint8_t rtc_register, const uint8_t register_mask)
{
	return (read_rtc_register(rtc_register) & register_mask);
 18e:	2001      	movs	r0, #1
 190:	4b02      	ldr	r3, [pc, #8]	; (19c <get_second+0x10>)
 192:	4798      	blx	r3
}

uint8_t get_second(void)
{
	return get_rtc_data(SECOND_REGISTER, SECOND_MASK);
 194:	237f      	movs	r3, #127	; 0x7f
 196:	4018      	ands	r0, r3
}
 198:	bd10      	pop	{r4, pc}
 19a:	46c0      	nop			; (mov r8, r8)
 19c:	00000115 	.word	0x00000115

000001a0 <get_minute>:

uint8_t get_minute(void)
{
 1a0:	b510      	push	{r4, lr}
	return (1);
}

uint8_t get_rtc_data(const uint8_t rtc_register, const uint8_t register_mask)
{
	return (read_rtc_register(rtc_register) & register_mask);
 1a2:	2002      	movs	r0, #2
 1a4:	4b02      	ldr	r3, [pc, #8]	; (1b0 <get_minute+0x10>)
 1a6:	4798      	blx	r3
	return get_rtc_data(SECOND_REGISTER, SECOND_MASK);
}

uint8_t get_minute(void)
{
	return get_rtc_data(MINUTE_REGISTER, MINUTE_MASK);
 1a8:	237f      	movs	r3, #127	; 0x7f
 1aa:	4018      	ands	r0, r3
}
 1ac:	bd10      	pop	{r4, pc}
 1ae:	46c0      	nop			; (mov r8, r8)
 1b0:	00000115 	.word	0x00000115

000001b4 <get_hour>:

uint8_t get_hour(void)
{
 1b4:	b510      	push	{r4, lr}
	return (1);
}

uint8_t get_rtc_data(const uint8_t rtc_register, const uint8_t register_mask)
{
	return (read_rtc_register(rtc_register) & register_mask);
 1b6:	2003      	movs	r0, #3
 1b8:	4b02      	ldr	r3, [pc, #8]	; (1c4 <get_hour+0x10>)
 1ba:	4798      	blx	r3
	return get_rtc_data(MINUTE_REGISTER, MINUTE_MASK);
}

uint8_t get_hour(void)
{
	return get_rtc_data(HOUR_REGISTER, HOUR_24_MASK);
 1bc:	233f      	movs	r3, #63	; 0x3f
 1be:	4018      	ands	r0, r3
}
 1c0:	bd10      	pop	{r4, pc}
 1c2:	46c0      	nop			; (mov r8, r8)
 1c4:	00000115 	.word	0x00000115

000001c8 <get_date>:
{
	return get_rtc_data(DAY_REGISTER, DAY_MASK);
}

uint8_t get_date(void)
{
 1c8:	b510      	push	{r4, lr}
	return (1);
}

uint8_t get_rtc_data(const uint8_t rtc_register, const uint8_t register_mask)
{
	return (read_rtc_register(rtc_register) & register_mask);
 1ca:	2004      	movs	r0, #4
 1cc:	4b02      	ldr	r3, [pc, #8]	; (1d8 <get_date+0x10>)
 1ce:	4798      	blx	r3
	return get_rtc_data(DAY_REGISTER, DAY_MASK);
}

uint8_t get_date(void)
{
	return get_rtc_data(DATE_REGISTER, DATE_MASK);
 1d0:	233f      	movs	r3, #63	; 0x3f
 1d2:	4018      	ands	r0, r3
}
 1d4:	bd10      	pop	{r4, pc}
 1d6:	46c0      	nop			; (mov r8, r8)
 1d8:	00000115 	.word	0x00000115

000001dc <get_month>:

uint8_t get_month(void)
{
 1dc:	b510      	push	{r4, lr}
	return (1);
}

uint8_t get_rtc_data(const uint8_t rtc_register, const uint8_t register_mask)
{
	return (read_rtc_register(rtc_register) & register_mask);
 1de:	2005      	movs	r0, #5
 1e0:	4b02      	ldr	r3, [pc, #8]	; (1ec <get_month+0x10>)
 1e2:	4798      	blx	r3
	return get_rtc_data(DATE_REGISTER, DATE_MASK);
}

uint8_t get_month(void)
{
	return get_rtc_data(MONTH_REGISTER, MONTH_MASK);
 1e4:	231f      	movs	r3, #31
 1e6:	4018      	ands	r0, r3
}
 1e8:	bd10      	pop	{r4, pc}
 1ea:	46c0      	nop			; (mov r8, r8)
 1ec:	00000115 	.word	0x00000115

000001f0 <get_year>:

uint8_t get_year(void)
{
 1f0:	b510      	push	{r4, lr}
	return (1);
}

uint8_t get_rtc_data(const uint8_t rtc_register, const uint8_t register_mask)
{
	return (read_rtc_register(rtc_register) & register_mask);
 1f2:	2006      	movs	r0, #6
 1f4:	4b01      	ldr	r3, [pc, #4]	; (1fc <get_year+0xc>)
 1f6:	4798      	blx	r3
}

uint8_t get_year(void)
{
	return get_rtc_data(YEAR_REGISTER, YEAR_MASK);
}
 1f8:	bd10      	pop	{r4, pc}
 1fa:	46c0      	nop			; (mov r8, r8)
 1fc:	00000115 	.word	0x00000115

00000200 <set_second>:
	_date = get_date();
	_month = get_month();
	_year = get_year();
}

void set_second(const uint8_t value) {
 200:	b510      	push	{r4, lr}
	_seconds = value % MAX_SECOND;
 202:	2160      	movs	r1, #96	; 0x60
 204:	4b05      	ldr	r3, [pc, #20]	; (21c <set_second+0x1c>)
 206:	4798      	blx	r3
 208:	b2c9      	uxtb	r1, r1
 20a:	4b05      	ldr	r3, [pc, #20]	; (220 <set_second+0x20>)
 20c:	7019      	strb	r1, [r3, #0]
	write_rtc_register(SECOND_REGISTER, _seconds);
 20e:	7819      	ldrb	r1, [r3, #0]
 210:	b2c9      	uxtb	r1, r1
 212:	2001      	movs	r0, #1
 214:	4b03      	ldr	r3, [pc, #12]	; (224 <set_second+0x24>)
 216:	4798      	blx	r3
}
 218:	bd10      	pop	{r4, pc}
 21a:	46c0      	nop			; (mov r8, r8)
 21c:	00000b2d 	.word	0x00000b2d
 220:	200004ac 	.word	0x200004ac
 224:	00000141 	.word	0x00000141

00000228 <set_minute>:

void set_minute(const uint8_t value) {
 228:	b510      	push	{r4, lr}
	_minutes = value % MAX_MINUTE;
 22a:	2160      	movs	r1, #96	; 0x60
 22c:	4b05      	ldr	r3, [pc, #20]	; (244 <set_minute+0x1c>)
 22e:	4798      	blx	r3
 230:	b2c9      	uxtb	r1, r1
 232:	4b05      	ldr	r3, [pc, #20]	; (248 <set_minute+0x20>)
 234:	7019      	strb	r1, [r3, #0]
	write_rtc_register(MINUTE_REGISTER, _minutes);
 236:	7819      	ldrb	r1, [r3, #0]
 238:	b2c9      	uxtb	r1, r1
 23a:	2002      	movs	r0, #2
 23c:	4b03      	ldr	r3, [pc, #12]	; (24c <set_minute+0x24>)
 23e:	4798      	blx	r3
}
 240:	bd10      	pop	{r4, pc}
 242:	46c0      	nop			; (mov r8, r8)
 244:	00000b2d 	.word	0x00000b2d
 248:	200004ab 	.word	0x200004ab
 24c:	00000141 	.word	0x00000141

00000250 <set_hour>:

void set_hour(const uint8_t value) {
 250:	b510      	push	{r4, lr}
	_hour = value % MAX_HOURS;
 252:	2124      	movs	r1, #36	; 0x24
 254:	4b05      	ldr	r3, [pc, #20]	; (26c <set_hour+0x1c>)
 256:	4798      	blx	r3
 258:	b2c9      	uxtb	r1, r1
 25a:	4b05      	ldr	r3, [pc, #20]	; (270 <set_hour+0x20>)
 25c:	7019      	strb	r1, [r3, #0]
	write_rtc_register(HOUR_REGISTER, _hour);
 25e:	7819      	ldrb	r1, [r3, #0]
 260:	b2c9      	uxtb	r1, r1
 262:	2003      	movs	r0, #3
 264:	4b03      	ldr	r3, [pc, #12]	; (274 <set_hour+0x24>)
 266:	4798      	blx	r3
}
 268:	bd10      	pop	{r4, pc}
 26a:	46c0      	nop			; (mov r8, r8)
 26c:	00000b2d 	.word	0x00000b2d
 270:	20000453 	.word	0x20000453
 274:	00000141 	.word	0x00000141

00000278 <set_day>:

void set_day(const uint8_t value) {
 278:	b510      	push	{r4, lr}
	_day = value % MAX_DAY;
 27a:	2307      	movs	r3, #7
 27c:	4018      	ands	r0, r3
 27e:	4b04      	ldr	r3, [pc, #16]	; (290 <set_day+0x18>)
 280:	7018      	strb	r0, [r3, #0]
	write_rtc_register(DAY_REGISTER, _day);
 282:	7819      	ldrb	r1, [r3, #0]
 284:	b2c9      	uxtb	r1, r1
 286:	2007      	movs	r0, #7
 288:	4b02      	ldr	r3, [pc, #8]	; (294 <set_day+0x1c>)
 28a:	4798      	blx	r3
}
 28c:	bd10      	pop	{r4, pc}
 28e:	46c0      	nop			; (mov r8, r8)
 290:	20000451 	.word	0x20000451
 294:	00000141 	.word	0x00000141

00000298 <set_date>:

void set_date(const uint8_t value) {
 298:	b510      	push	{r4, lr}
	_date = value % MAX_DATE;
 29a:	2132      	movs	r1, #50	; 0x32
 29c:	4b05      	ldr	r3, [pc, #20]	; (2b4 <set_date+0x1c>)
 29e:	4798      	blx	r3
 2a0:	b2c9      	uxtb	r1, r1
 2a2:	4b05      	ldr	r3, [pc, #20]	; (2b8 <set_date+0x20>)
 2a4:	7019      	strb	r1, [r3, #0]
	write_rtc_register(DATE_REGISTER, _date);
 2a6:	7819      	ldrb	r1, [r3, #0]
 2a8:	b2c9      	uxtb	r1, r1
 2aa:	2004      	movs	r0, #4
 2ac:	4b03      	ldr	r3, [pc, #12]	; (2bc <set_date+0x24>)
 2ae:	4798      	blx	r3
}
 2b0:	bd10      	pop	{r4, pc}
 2b2:	46c0      	nop			; (mov r8, r8)
 2b4:	00000b2d 	.word	0x00000b2d
 2b8:	2000044d 	.word	0x2000044d
 2bc:	00000141 	.word	0x00000141

000002c0 <set_month>:

void set_month(const uint8_t value) {
 2c0:	b510      	push	{r4, lr}
	_month = value % MAX_MONTH;
 2c2:	2113      	movs	r1, #19
 2c4:	4b05      	ldr	r3, [pc, #20]	; (2dc <set_month+0x1c>)
 2c6:	4798      	blx	r3
 2c8:	b2c9      	uxtb	r1, r1
 2ca:	4b05      	ldr	r3, [pc, #20]	; (2e0 <set_month+0x20>)
 2cc:	7019      	strb	r1, [r3, #0]
	write_rtc_register(MONTH_REGISTER, _month);
 2ce:	7819      	ldrb	r1, [r3, #0]
 2d0:	b2c9      	uxtb	r1, r1
 2d2:	2005      	movs	r0, #5
 2d4:	4b03      	ldr	r3, [pc, #12]	; (2e4 <set_month+0x24>)
 2d6:	4798      	blx	r3
}
 2d8:	bd10      	pop	{r4, pc}
 2da:	46c0      	nop			; (mov r8, r8)
 2dc:	00000b2d 	.word	0x00000b2d
 2e0:	20000494 	.word	0x20000494
 2e4:	00000141 	.word	0x00000141

000002e8 <set_year>:

void set_year(const uint8_t value) {
 2e8:	b510      	push	{r4, lr}
 2ea:	0001      	movs	r1, r0
	_year = value % MAX_YEAR;
 2ec:	4b02      	ldr	r3, [pc, #8]	; (2f8 <set_year+0x10>)
 2ee:	7018      	strb	r0, [r3, #0]
	write_rtc_register(YEAR_REGISTER, value);
 2f0:	2006      	movs	r0, #6
 2f2:	4b02      	ldr	r3, [pc, #8]	; (2fc <set_year+0x14>)
 2f4:	4798      	blx	r3
}
 2f6:	bd10      	pop	{r4, pc}
 2f8:	2000044c 	.word	0x2000044c
 2fc:	00000141 	.word	0x00000141

00000300 <set_datetime>:

void set_datetime(uint8_t year, uint8_t month, uint8_t date, uint8_t day, uint8_t hour, uint8_t minutes, uint8_t seconds) {
 300:	b5f0      	push	{r4, r5, r6, r7, lr}
 302:	b083      	sub	sp, #12
 304:	000f      	movs	r7, r1
 306:	9200      	str	r2, [sp, #0]
 308:	9301      	str	r3, [sp, #4]
 30a:	ab08      	add	r3, sp, #32
 30c:	781e      	ldrb	r6, [r3, #0]
 30e:	ab09      	add	r3, sp, #36	; 0x24
 310:	781d      	ldrb	r5, [r3, #0]
 312:	ab0a      	add	r3, sp, #40	; 0x28
 314:	781c      	ldrb	r4, [r3, #0]
	set_year(year);
 316:	4b0b      	ldr	r3, [pc, #44]	; (344 <set_datetime+0x44>)
 318:	4798      	blx	r3
	set_month(month);
 31a:	0038      	movs	r0, r7
 31c:	4b0a      	ldr	r3, [pc, #40]	; (348 <set_datetime+0x48>)
 31e:	4798      	blx	r3
	set_date(date);
 320:	9800      	ldr	r0, [sp, #0]
 322:	4b0a      	ldr	r3, [pc, #40]	; (34c <set_datetime+0x4c>)
 324:	4798      	blx	r3
	set_day(day);
 326:	9801      	ldr	r0, [sp, #4]
 328:	4b09      	ldr	r3, [pc, #36]	; (350 <set_datetime+0x50>)
 32a:	4798      	blx	r3
	set_hour(hour);
 32c:	0030      	movs	r0, r6
 32e:	4b09      	ldr	r3, [pc, #36]	; (354 <set_datetime+0x54>)
 330:	4798      	blx	r3
	set_minute(minutes);
 332:	0028      	movs	r0, r5
 334:	4b08      	ldr	r3, [pc, #32]	; (358 <set_datetime+0x58>)
 336:	4798      	blx	r3
	set_second(seconds);
 338:	0020      	movs	r0, r4
 33a:	4b08      	ldr	r3, [pc, #32]	; (35c <set_datetime+0x5c>)
 33c:	4798      	blx	r3
}
 33e:	b003      	add	sp, #12
 340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 342:	46c0      	nop			; (mov r8, r8)
 344:	000002e9 	.word	0x000002e9
 348:	000002c1 	.word	0x000002c1
 34c:	00000299 	.word	0x00000299
 350:	00000279 	.word	0x00000279
 354:	00000251 	.word	0x00000251
 358:	00000229 	.word	0x00000229
 35c:	00000201 	.word	0x00000201

00000360 <get_date_string>:



	
void get_date_string(void)
{
 360:	b5f0      	push	{r4, r5, r6, r7, lr}
 362:	4647      	mov	r7, r8
 364:	b480      	push	{r7}
	_date = get_date();
 366:	4b36      	ldr	r3, [pc, #216]	; (440 <get_date_string+0xe0>)
 368:	4798      	blx	r3
 36a:	4e36      	ldr	r6, [pc, #216]	; (444 <get_date_string+0xe4>)
 36c:	7030      	strb	r0, [r6, #0]
	Value2String(((_date & 0xF0) >> 4),(uint8_t*)&DateString[0],1);
 36e:	7830      	ldrb	r0, [r6, #0]
 370:	4c35      	ldr	r4, [pc, #212]	; (448 <get_date_string+0xe8>)
 372:	0900      	lsrs	r0, r0, #4
 374:	2201      	movs	r2, #1
 376:	0021      	movs	r1, r4
 378:	4d34      	ldr	r5, [pc, #208]	; (44c <get_date_string+0xec>)
 37a:	47a8      	blx	r5
	Value2String(_date & 0x0F,(uint8_t*)&DateString[1],1);
 37c:	7830      	ldrb	r0, [r6, #0]
 37e:	1c61      	adds	r1, r4, #1
 380:	260f      	movs	r6, #15
 382:	4030      	ands	r0, r6
 384:	2201      	movs	r2, #1
 386:	47a8      	blx	r5
	DateString[2] = '.';
 388:	232e      	movs	r3, #46	; 0x2e
 38a:	4698      	mov	r8, r3
 38c:	70a3      	strb	r3, [r4, #2]
	
	_month = get_month();
 38e:	4b30      	ldr	r3, [pc, #192]	; (450 <get_date_string+0xf0>)
 390:	4798      	blx	r3
 392:	4f30      	ldr	r7, [pc, #192]	; (454 <get_date_string+0xf4>)
 394:	7038      	strb	r0, [r7, #0]
	Value2String(((_month & 0xF0) >> 4),(uint8_t*)&DateString[3],1);
 396:	7838      	ldrb	r0, [r7, #0]
 398:	1ce1      	adds	r1, r4, #3
 39a:	0900      	lsrs	r0, r0, #4
 39c:	2201      	movs	r2, #1
 39e:	47a8      	blx	r5
	Value2String(_month & 0x0F,(uint8_t*)&DateString[4],1);
 3a0:	7838      	ldrb	r0, [r7, #0]
 3a2:	1d21      	adds	r1, r4, #4
 3a4:	4030      	ands	r0, r6
 3a6:	2201      	movs	r2, #1
 3a8:	47a8      	blx	r5
	DateString[5] = '.';
 3aa:	4643      	mov	r3, r8
 3ac:	7163      	strb	r3, [r4, #5]
	
	_year = get_year();
 3ae:	4b2a      	ldr	r3, [pc, #168]	; (458 <get_date_string+0xf8>)
 3b0:	4798      	blx	r3
 3b2:	4f2a      	ldr	r7, [pc, #168]	; (45c <get_date_string+0xfc>)
 3b4:	7038      	strb	r0, [r7, #0]
	Value2String(((_year & 0xF0) >> 4),(uint8_t*)&DateString[6],1);
 3b6:	7838      	ldrb	r0, [r7, #0]
 3b8:	1da1      	adds	r1, r4, #6
 3ba:	0900      	lsrs	r0, r0, #4
 3bc:	2201      	movs	r2, #1
 3be:	47a8      	blx	r5
	Value2String(_year & 0x0F,(uint8_t*)&DateString[7],1);
 3c0:	7838      	ldrb	r0, [r7, #0]
 3c2:	1de1      	adds	r1, r4, #7
 3c4:	4030      	ands	r0, r6
 3c6:	2201      	movs	r2, #1
 3c8:	47a8      	blx	r5
	DateString[8] = '/';
 3ca:	232f      	movs	r3, #47	; 0x2f
 3cc:	7223      	strb	r3, [r4, #8]
	
	_hour = get_hour();
 3ce:	4b24      	ldr	r3, [pc, #144]	; (460 <get_date_string+0x100>)
 3d0:	4798      	blx	r3
 3d2:	4f24      	ldr	r7, [pc, #144]	; (464 <get_date_string+0x104>)
 3d4:	7038      	strb	r0, [r7, #0]
	Value2String(((_hour & 0xF0) >> 4),(uint8_t*)&DateString[9],1);
 3d6:	7838      	ldrb	r0, [r7, #0]
 3d8:	0021      	movs	r1, r4
 3da:	3109      	adds	r1, #9
 3dc:	0900      	lsrs	r0, r0, #4
 3de:	2201      	movs	r2, #1
 3e0:	47a8      	blx	r5
	Value2String(_hour & 0x0F,(uint8_t*)&DateString[10],1);
 3e2:	7838      	ldrb	r0, [r7, #0]
 3e4:	0021      	movs	r1, r4
 3e6:	310a      	adds	r1, #10
 3e8:	4030      	ands	r0, r6
 3ea:	2201      	movs	r2, #1
 3ec:	47a8      	blx	r5
	DateString[11] = ':';
 3ee:	233a      	movs	r3, #58	; 0x3a
 3f0:	4698      	mov	r8, r3
 3f2:	72e3      	strb	r3, [r4, #11]
	
	_minutes = get_minute();
 3f4:	4b1c      	ldr	r3, [pc, #112]	; (468 <get_date_string+0x108>)
 3f6:	4798      	blx	r3
 3f8:	4f1c      	ldr	r7, [pc, #112]	; (46c <get_date_string+0x10c>)
 3fa:	7038      	strb	r0, [r7, #0]
	Value2String(((_minutes & 0xF0) >> 4),(uint8_t*)&DateString[12],1);
 3fc:	7838      	ldrb	r0, [r7, #0]
 3fe:	0021      	movs	r1, r4
 400:	310c      	adds	r1, #12
 402:	0900      	lsrs	r0, r0, #4
 404:	2201      	movs	r2, #1
 406:	47a8      	blx	r5
	Value2String(_minutes & 0x0F,(uint8_t*)&DateString[13],1);
 408:	7838      	ldrb	r0, [r7, #0]
 40a:	0021      	movs	r1, r4
 40c:	310d      	adds	r1, #13
 40e:	4030      	ands	r0, r6
 410:	2201      	movs	r2, #1
 412:	47a8      	blx	r5
	DateString[14] = ':';
 414:	4643      	mov	r3, r8
 416:	73a3      	strb	r3, [r4, #14]
	
	_seconds = get_second();
 418:	4b15      	ldr	r3, [pc, #84]	; (470 <get_date_string+0x110>)
 41a:	4798      	blx	r3
 41c:	4f15      	ldr	r7, [pc, #84]	; (474 <get_date_string+0x114>)
 41e:	7038      	strb	r0, [r7, #0]
	Value2String(((_seconds & 0xF0) >> 4),(uint8_t*)&DateString[15],1);
 420:	7838      	ldrb	r0, [r7, #0]
 422:	0021      	movs	r1, r4
 424:	310f      	adds	r1, #15
 426:	0900      	lsrs	r0, r0, #4
 428:	2201      	movs	r2, #1
 42a:	47a8      	blx	r5
	Value2String(_seconds & 0x0F,(uint8_t*)&DateString[16],1);
 42c:	7838      	ldrb	r0, [r7, #0]
 42e:	0021      	movs	r1, r4
 430:	3110      	adds	r1, #16
 432:	4030      	ands	r0, r6
 434:	2201      	movs	r2, #1
 436:	47a8      	blx	r5
 438:	bc04      	pop	{r2}
 43a:	4690      	mov	r8, r2
 43c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 43e:	46c0      	nop			; (mov r8, r8)
 440:	000001c9 	.word	0x000001c9
 444:	2000044d 	.word	0x2000044d
 448:	20000498 	.word	0x20000498
 44c:	000007d5 	.word	0x000007d5
 450:	000001dd 	.word	0x000001dd
 454:	20000494 	.word	0x20000494
 458:	000001f1 	.word	0x000001f1
 45c:	2000044c 	.word	0x2000044c
 460:	000001b5 	.word	0x000001b5
 464:	20000453 	.word	0x20000453
 468:	000001a1 	.word	0x000001a1
 46c:	200004ab 	.word	0x200004ab
 470:	0000018d 	.word	0x0000018d
 474:	200004ac 	.word	0x200004ac

00000478 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 478:	e7fe      	b.n	478 <Dummy_Handler>
 47a:	46c0      	nop			; (mov r8, r8)

0000047c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
 47c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
 47e:	4b2e      	ldr	r3, [pc, #184]	; (538 <Reset_Handler+0xbc>)
 480:	4a2e      	ldr	r2, [pc, #184]	; (53c <Reset_Handler+0xc0>)
 482:	429a      	cmp	r2, r3
 484:	d003      	beq.n	48e <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
 486:	4b2e      	ldr	r3, [pc, #184]	; (540 <Reset_Handler+0xc4>)
 488:	4a2b      	ldr	r2, [pc, #172]	; (538 <Reset_Handler+0xbc>)
 48a:	429a      	cmp	r2, r3
 48c:	d304      	bcc.n	498 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 48e:	4b2d      	ldr	r3, [pc, #180]	; (544 <Reset_Handler+0xc8>)
 490:	4a2d      	ldr	r2, [pc, #180]	; (548 <Reset_Handler+0xcc>)
 492:	429a      	cmp	r2, r3
 494:	d310      	bcc.n	4b8 <Reset_Handler+0x3c>
 496:	e01e      	b.n	4d6 <Reset_Handler+0x5a>
 498:	4a2c      	ldr	r2, [pc, #176]	; (54c <Reset_Handler+0xd0>)
 49a:	4b29      	ldr	r3, [pc, #164]	; (540 <Reset_Handler+0xc4>)
 49c:	3303      	adds	r3, #3
 49e:	1a9b      	subs	r3, r3, r2
 4a0:	089b      	lsrs	r3, r3, #2
 4a2:	3301      	adds	r3, #1
 4a4:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 4a6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 4a8:	4823      	ldr	r0, [pc, #140]	; (538 <Reset_Handler+0xbc>)
 4aa:	4924      	ldr	r1, [pc, #144]	; (53c <Reset_Handler+0xc0>)
 4ac:	588c      	ldr	r4, [r1, r2]
 4ae:	5084      	str	r4, [r0, r2]
 4b0:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 4b2:	429a      	cmp	r2, r3
 4b4:	d1fa      	bne.n	4ac <Reset_Handler+0x30>
 4b6:	e7ea      	b.n	48e <Reset_Handler+0x12>
 4b8:	4a25      	ldr	r2, [pc, #148]	; (550 <Reset_Handler+0xd4>)
 4ba:	4b22      	ldr	r3, [pc, #136]	; (544 <Reset_Handler+0xc8>)
 4bc:	3303      	adds	r3, #3
 4be:	1a9b      	subs	r3, r3, r2
 4c0:	089b      	lsrs	r3, r3, #2
 4c2:	3301      	adds	r3, #1
 4c4:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 4c6:	2200      	movs	r2, #0
                *pDest++ = 0;
 4c8:	481f      	ldr	r0, [pc, #124]	; (548 <Reset_Handler+0xcc>)
 4ca:	2100      	movs	r1, #0
 4cc:	1814      	adds	r4, r2, r0
 4ce:	6021      	str	r1, [r4, #0]
 4d0:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 4d2:	429a      	cmp	r2, r3
 4d4:	d1fa      	bne.n	4cc <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 4d6:	4a1f      	ldr	r2, [pc, #124]	; (554 <Reset_Handler+0xd8>)
 4d8:	21ff      	movs	r1, #255	; 0xff
 4da:	4b1f      	ldr	r3, [pc, #124]	; (558 <Reset_Handler+0xdc>)
 4dc:	438b      	bics	r3, r1
 4de:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 4e0:	39fd      	subs	r1, #253	; 0xfd
 4e2:	2390      	movs	r3, #144	; 0x90
 4e4:	005b      	lsls	r3, r3, #1
 4e6:	4a1d      	ldr	r2, [pc, #116]	; (55c <Reset_Handler+0xe0>)
 4e8:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 4ea:	481d      	ldr	r0, [pc, #116]	; (560 <Reset_Handler+0xe4>)
 4ec:	78c3      	ldrb	r3, [r0, #3]
 4ee:	2403      	movs	r4, #3
 4f0:	43a3      	bics	r3, r4
 4f2:	2202      	movs	r2, #2
 4f4:	4313      	orrs	r3, r2
 4f6:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 4f8:	78c3      	ldrb	r3, [r0, #3]
 4fa:	260c      	movs	r6, #12
 4fc:	43b3      	bics	r3, r6
 4fe:	2108      	movs	r1, #8
 500:	430b      	orrs	r3, r1
 502:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
 504:	4b17      	ldr	r3, [pc, #92]	; (564 <Reset_Handler+0xe8>)
 506:	7b98      	ldrb	r0, [r3, #14]
 508:	2530      	movs	r5, #48	; 0x30
 50a:	43a8      	bics	r0, r5
 50c:	0005      	movs	r5, r0
 50e:	2020      	movs	r0, #32
 510:	4328      	orrs	r0, r5
 512:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 514:	7b98      	ldrb	r0, [r3, #14]
 516:	43b0      	bics	r0, r6
 518:	4301      	orrs	r1, r0
 51a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 51c:	7b99      	ldrb	r1, [r3, #14]
 51e:	43a1      	bics	r1, r4
 520:	430a      	orrs	r2, r1
 522:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
 524:	4a10      	ldr	r2, [pc, #64]	; (568 <Reset_Handler+0xec>)
 526:	6851      	ldr	r1, [r2, #4]
 528:	2380      	movs	r3, #128	; 0x80
 52a:	430b      	orrs	r3, r1
 52c:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
 52e:	4b0f      	ldr	r3, [pc, #60]	; (56c <Reset_Handler+0xf0>)
 530:	4798      	blx	r3

        /* Branch to main function */
        main();
 532:	4b0f      	ldr	r3, [pc, #60]	; (570 <Reset_Handler+0xf4>)
 534:	4798      	blx	r3
 536:	e7fe      	b.n	536 <Reset_Handler+0xba>
 538:	20000000 	.word	0x20000000
 53c:	00000eb4 	.word	0x00000eb4
 540:	20000430 	.word	0x20000430
 544:	200004b0 	.word	0x200004b0
 548:	20000430 	.word	0x20000430
 54c:	20000004 	.word	0x20000004
 550:	20000434 	.word	0x20000434
 554:	e000ed00 	.word	0xe000ed00
 558:	00000000 	.word	0x00000000
 55c:	41007000 	.word	0x41007000
 560:	41005000 	.word	0x41005000
 564:	41004800 	.word	0x41004800
 568:	41004000 	.word	0x41004000
 56c:	00000d0d 	.word	0x00000d0d
 570:	000006d1 	.word	0x000006d1

00000574 <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
 574:	4a01      	ldr	r2, [pc, #4]	; (57c <SystemInit+0x8>)
 576:	4b02      	ldr	r3, [pc, #8]	; (580 <SystemInit+0xc>)
 578:	601a      	str	r2, [r3, #0]
	return;
}
 57a:	4770      	bx	lr
 57c:	000f4240 	.word	0x000f4240
 580:	20000000 	.word	0x20000000

00000584 <InitI2C>:
//-----------------------------------------------------------------------------
// Init I2C Master Mode
//-----------------------------------------------------------------------------
void InitI2C()
{
	PM->APBCMASK.bit.SERCOM0_ = 1;
 584:	4a13      	ldr	r2, [pc, #76]	; (5d4 <InitI2C+0x50>)
 586:	6a11      	ldr	r1, [r2, #32]
 588:	2304      	movs	r3, #4
 58a:	430b      	orrs	r3, r1
 58c:	6213      	str	r3, [r2, #32]
	//Set I2C Mode to Master Mode
	SERCOM0->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_MODE(0x5);
 58e:	4b12      	ldr	r3, [pc, #72]	; (5d8 <InitI2C+0x54>)
 590:	6819      	ldr	r1, [r3, #0]
 592:	2214      	movs	r2, #20
 594:	430a      	orrs	r2, r1
 596:	601a      	str	r2, [r3, #0]
		
	//BAUD berechnung: fref/(2*fBaud) -1
	SERCOM0->I2CM.BAUD.reg |= SERCOM_I2CM_BAUD_BAUD(207); // = 9600 Baud
 598:	68d9      	ldr	r1, [r3, #12]
 59a:	22cf      	movs	r2, #207	; 0xcf
 59c:	430a      	orrs	r2, r1
 59e:	60da      	str	r2, [r3, #12]
		
	//Enable Smart Mode
	SERCOM0->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
 5a0:	685a      	ldr	r2, [r3, #4]
 5a2:	2180      	movs	r1, #128	; 0x80
 5a4:	0049      	lsls	r1, r1, #1
 5a6:	430a      	orrs	r2, r1
 5a8:	605a      	str	r2, [r3, #4]
	while (SERCOM0->I2CM.SYNCBUSY.reg);
 5aa:	001a      	movs	r2, r3
 5ac:	69d3      	ldr	r3, [r2, #28]
 5ae:	2b00      	cmp	r3, #0
 5b0:	d1fc      	bne.n	5ac <InitI2C+0x28>
		
	//Enable I2C
	SERCOM0->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
 5b2:	4a09      	ldr	r2, [pc, #36]	; (5d8 <InitI2C+0x54>)
 5b4:	6811      	ldr	r1, [r2, #0]
 5b6:	3302      	adds	r3, #2
 5b8:	430b      	orrs	r3, r1
 5ba:	6013      	str	r3, [r2, #0]
	while (SERCOM0->I2CM.SYNCBUSY.reg);
 5bc:	69d3      	ldr	r3, [r2, #28]
 5be:	2b00      	cmp	r3, #0
 5c0:	d1fc      	bne.n	5bc <InitI2C+0x38>
		
	//Set Busstate to IDLE Mode
	SERCOM0->I2CM.STATUS.reg |= SERCOM_I2CM_STATUS_BUSSTATE(0x1);
 5c2:	4a05      	ldr	r2, [pc, #20]	; (5d8 <InitI2C+0x54>)
 5c4:	8b51      	ldrh	r1, [r2, #26]
 5c6:	3310      	adds	r3, #16
 5c8:	430b      	orrs	r3, r1
 5ca:	8353      	strh	r3, [r2, #26]
	while (SERCOM0->I2CM.SYNCBUSY.reg);
 5cc:	69d3      	ldr	r3, [r2, #28]
 5ce:	2b00      	cmp	r3, #0
 5d0:	d1fc      	bne.n	5cc <InitI2C+0x48>

}
 5d2:	4770      	bx	lr
 5d4:	40000400 	.word	0x40000400
 5d8:	42000800 	.word	0x42000800

000005dc <i2c_write>:

//-----------------------------------------------------------------------------
// WRITE Data to Slave
//-----------------------------------------------------------------------------
void i2c_write(uint8_t *data, uint8_t size)
{
 5dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 5de:	4647      	mov	r7, r8
 5e0:	b480      	push	{r7}
	//Send Slave Address and Write
	SERCOM0->I2CM.ADDR.reg = I2C_ADDRESS<<1 | I2C_TRANSFER_WRITE;
 5e2:	22d2      	movs	r2, #210	; 0xd2
 5e4:	4b1a      	ldr	r3, [pc, #104]	; (650 <i2c_write+0x74>)
 5e6:	625a      	str	r2, [r3, #36]	; 0x24
	
	while (0 == (SERCOM0->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
 5e8:	001c      	movs	r4, r3
 5ea:	3ad1      	subs	r2, #209	; 0xd1
 5ec:	7e23      	ldrb	r3, [r4, #24]
 5ee:	4213      	tst	r3, r2
 5f0:	d0fc      	beq.n	5ec <i2c_write+0x10>

	//If no ACK from Slave send STOP
	if (SERCOM0->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
 5f2:	4b17      	ldr	r3, [pc, #92]	; (650 <i2c_write+0x74>)
 5f4:	8b5b      	ldrh	r3, [r3, #26]
 5f6:	075b      	lsls	r3, r3, #29
 5f8:	d505      	bpl.n	606 <i2c_write+0x2a>
	{
		SERCOM0->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
 5fa:	4a15      	ldr	r2, [pc, #84]	; (650 <i2c_write+0x74>)
 5fc:	6853      	ldr	r3, [r2, #4]
 5fe:	24c0      	movs	r4, #192	; 0xc0
 600:	02a4      	lsls	r4, r4, #10
 602:	4323      	orrs	r3, r4
 604:	6053      	str	r3, [r2, #4]
	}
	
	//Send Data
	for (int i = 0; i < size; i++)
 606:	2900      	cmp	r1, #0
 608:	dd18      	ble.n	63c <i2c_write+0x60>
 60a:	2500      	movs	r5, #0
	{
		SERCOM0->I2CM.DATA.reg = SERCOM_I2CM_DATA_DATA(data[i]);
 60c:	4a10      	ldr	r2, [pc, #64]	; (650 <i2c_write+0x74>)
 60e:	2728      	movs	r7, #40	; 0x28

		while (0 == (SERCOM0->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
 610:	2401      	movs	r4, #1
		
		//If no ACK send STOP
		if (SERCOM0->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
 612:	2304      	movs	r3, #4
 614:	4698      	mov	r8, r3
		{
			SERCOM0->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
 616:	23c0      	movs	r3, #192	; 0xc0
 618:	029b      	lsls	r3, r3, #10
 61a:	469c      	mov	ip, r3
	}
	
	//Send Data
	for (int i = 0; i < size; i++)
	{
		SERCOM0->I2CM.DATA.reg = SERCOM_I2CM_DATA_DATA(data[i]);
 61c:	5d43      	ldrb	r3, [r0, r5]
 61e:	55d3      	strb	r3, [r2, r7]

		while (0 == (SERCOM0->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
 620:	7e13      	ldrb	r3, [r2, #24]
 622:	4223      	tst	r3, r4
 624:	d0fc      	beq.n	620 <i2c_write+0x44>
		
		//If no ACK send STOP
		if (SERCOM0->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
 626:	8b53      	ldrh	r3, [r2, #26]
 628:	4646      	mov	r6, r8
 62a:	4233      	tst	r3, r6
 62c:	d003      	beq.n	636 <i2c_write+0x5a>
		{
			SERCOM0->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
 62e:	6853      	ldr	r3, [r2, #4]
 630:	4666      	mov	r6, ip
 632:	4333      	orrs	r3, r6
 634:	6053      	str	r3, [r2, #4]
	{
		SERCOM0->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
	}
	
	//Send Data
	for (int i = 0; i < size; i++)
 636:	3501      	adds	r5, #1
 638:	428d      	cmp	r5, r1
 63a:	dbef      	blt.n	61c <i2c_write+0x40>
			SERCOM0->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	//Send STOP
	SERCOM0->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
 63c:	4a04      	ldr	r2, [pc, #16]	; (650 <i2c_write+0x74>)
 63e:	6853      	ldr	r3, [r2, #4]
 640:	21c0      	movs	r1, #192	; 0xc0
 642:	0289      	lsls	r1, r1, #10
 644:	430b      	orrs	r3, r1
 646:	6053      	str	r3, [r2, #4]

}
 648:	bc04      	pop	{r2}
 64a:	4690      	mov	r8, r2
 64c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 64e:	46c0      	nop			; (mov r8, r8)
 650:	42000800 	.word	0x42000800

00000654 <i2c_read>:

//-----------------------------------------------------------------------------
// READ Data from Slave
//-----------------------------------------------------------------------------
void i2c_read(uint8_t *data, uint8_t size)
{
 654:	b5f0      	push	{r4, r5, r6, r7, lr}
	//Write Slave Address and Read
	SERCOM0->I2CM.ADDR.reg = I2C_ADDRESS<<1 | I2C_TRANSFER_READ;
 656:	22d3      	movs	r2, #211	; 0xd3
 658:	4b1b      	ldr	r3, [pc, #108]	; (6c8 <i2c_read+0x74>)
 65a:	625a      	str	r2, [r3, #36]	; 0x24

	while (0 == (SERCOM0->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB));
 65c:	001c      	movs	r4, r3
 65e:	3ad1      	subs	r2, #209	; 0xd1
 660:	7e23      	ldrb	r3, [r4, #24]
 662:	4213      	tst	r3, r2
 664:	d0fc      	beq.n	660 <i2c_read+0xc>
	
	//If no ACK send STOP
	if (SERCOM0->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
 666:	4b18      	ldr	r3, [pc, #96]	; (6c8 <i2c_read+0x74>)
 668:	8b5b      	ldrh	r3, [r3, #26]
 66a:	075b      	lsls	r3, r3, #29
 66c:	d505      	bpl.n	67a <i2c_read+0x26>
	{
		SERCOM0->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
 66e:	4a16      	ldr	r2, [pc, #88]	; (6c8 <i2c_read+0x74>)
 670:	6853      	ldr	r3, [r2, #4]
 672:	24c0      	movs	r4, #192	; 0xc0
 674:	02a4      	lsls	r4, r4, #10
 676:	4323      	orrs	r3, r4
 678:	6053      	str	r3, [r2, #4]
	}
	
	//Clear ACKACT because Smart Mode is enabled
	SERCOM0->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
 67a:	4a13      	ldr	r2, [pc, #76]	; (6c8 <i2c_read+0x74>)
 67c:	6854      	ldr	r4, [r2, #4]
 67e:	4b13      	ldr	r3, [pc, #76]	; (6cc <i2c_read+0x78>)
 680:	4023      	ands	r3, r4
 682:	6053      	str	r3, [r2, #4]
	
	//Read Data from Slave
	for (int i = 0; i < size-1; i++)
 684:	1e4e      	subs	r6, r1, #1
 686:	2e00      	cmp	r6, #0
 688:	dd0a      	ble.n	6a0 <i2c_read+0x4c>
 68a:	2500      	movs	r5, #0
	{
		data[i] = SERCOM0->I2CM.DATA.reg;
 68c:	2728      	movs	r7, #40	; 0x28
		while (0 == (SERCOM0->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB));
 68e:	2402      	movs	r4, #2
	SERCOM0->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
	
	//Read Data from Slave
	for (int i = 0; i < size-1; i++)
	{
		data[i] = SERCOM0->I2CM.DATA.reg;
 690:	5dd3      	ldrb	r3, [r2, r7]
 692:	5543      	strb	r3, [r0, r5]
		while (0 == (SERCOM0->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB));
 694:	7e13      	ldrb	r3, [r2, #24]
 696:	4223      	tst	r3, r4
 698:	d0fc      	beq.n	694 <i2c_read+0x40>
	
	//Clear ACKACT because Smart Mode is enabled
	SERCOM0->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
	
	//Read Data from Slave
	for (int i = 0; i < size-1; i++)
 69a:	3501      	adds	r5, #1
 69c:	42b5      	cmp	r5, r6
 69e:	dbf7      	blt.n	690 <i2c_read+0x3c>
		data[i] = SERCOM0->I2CM.DATA.reg;
		while (0 == (SERCOM0->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB));
	}
	
	//Send no ACK when no more bytes will be read, and send STOP
	if (size)
 6a0:	2900      	cmp	r1, #0
 6a2:	d00f      	beq.n	6c4 <i2c_read+0x70>
	{
		SERCOM0->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
 6a4:	4b08      	ldr	r3, [pc, #32]	; (6c8 <i2c_read+0x74>)
 6a6:	685a      	ldr	r2, [r3, #4]
 6a8:	2480      	movs	r4, #128	; 0x80
 6aa:	02e4      	lsls	r4, r4, #11
 6ac:	4322      	orrs	r2, r4
 6ae:	605a      	str	r2, [r3, #4]
		SERCOM0->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
 6b0:	685a      	ldr	r2, [r3, #4]
 6b2:	24c0      	movs	r4, #192	; 0xc0
 6b4:	02a4      	lsls	r4, r4, #10
 6b6:	4322      	orrs	r2, r4
 6b8:	605a      	str	r2, [r3, #4]
		data[size-1] = SERCOM0->I2CM.DATA.reg;
 6ba:	2228      	movs	r2, #40	; 0x28
 6bc:	5c9b      	ldrb	r3, [r3, r2]
 6be:	1840      	adds	r0, r0, r1
 6c0:	3801      	subs	r0, #1
 6c2:	7003      	strb	r3, [r0, #0]
	}
}
 6c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 6c6:	46c0      	nop			; (mov r8, r8)
 6c8:	42000800 	.word	0x42000800
 6cc:	fffbffff 	.word	0xfffbffff

000006d0 <main>:
#include "Includes/uart.h"

void enable_interrupts(void);

int main(void)
{
 6d0:	b570      	push	{r4, r5, r6, lr}
 6d2:	b084      	sub	sp, #16
	/* Initialize the SAM system */
	SystemInit();
 6d4:	4b13      	ldr	r3, [pc, #76]	; (724 <main+0x54>)
 6d6:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 6d8:	2280      	movs	r2, #128	; 0x80
 6da:	0152      	lsls	r2, r2, #5
 6dc:	4b12      	ldr	r3, [pc, #72]	; (728 <main+0x58>)
 6de:	601a      	str	r2, [r3, #0]
	
	enable_interrupts();
	
	InitPorts();
 6e0:	4b12      	ldr	r3, [pc, #72]	; (72c <main+0x5c>)
 6e2:	4798      	blx	r3
	InitClocks();
 6e4:	4b12      	ldr	r3, [pc, #72]	; (730 <main+0x60>)
 6e6:	4798      	blx	r3
	
	InitI2C();
 6e8:	4b12      	ldr	r3, [pc, #72]	; (734 <main+0x64>)
 6ea:	4798      	blx	r3
	InitUART();
 6ec:	4b12      	ldr	r3, [pc, #72]	; (738 <main+0x68>)
 6ee:	4798      	blx	r3
	
	InitAB1805();
 6f0:	4b12      	ldr	r3, [pc, #72]	; (73c <main+0x6c>)
 6f2:	4798      	blx	r3
	//Set DateTime
	set_datetime(0x17,0x03,0x21,0x02,0x13,0x21,0x40);
 6f4:	2340      	movs	r3, #64	; 0x40
 6f6:	9302      	str	r3, [sp, #8]
 6f8:	3b1f      	subs	r3, #31
 6fa:	9301      	str	r3, [sp, #4]
 6fc:	3b0e      	subs	r3, #14
 6fe:	9300      	str	r3, [sp, #0]
 700:	3b11      	subs	r3, #17
 702:	2221      	movs	r2, #33	; 0x21
 704:	2103      	movs	r1, #3
 706:	2017      	movs	r0, #23
 708:	4c0d      	ldr	r4, [pc, #52]	; (740 <main+0x70>)
 70a:	47a0      	blx	r4
	/* Replace with your application code */
	while (1)
	{
		//Wait 1s
		for(uint32_t i=0;i<2000000;i++){}
		get_date_string();
 70c:	4e0d      	ldr	r6, [pc, #52]	; (744 <main+0x74>)
		uart_write(&DateString,17);
 70e:	4d0e      	ldr	r5, [pc, #56]	; (748 <main+0x78>)
 710:	4c0e      	ldr	r4, [pc, #56]	; (74c <main+0x7c>)
#include "Includes/uart.h"

void enable_interrupts(void);

int main(void)
{
 712:	4b0f      	ldr	r3, [pc, #60]	; (750 <main+0x80>)
 714:	3b01      	subs	r3, #1
	
	/* Replace with your application code */
	while (1)
	{
		//Wait 1s
		for(uint32_t i=0;i<2000000;i++){}
 716:	2b00      	cmp	r3, #0
 718:	d1fc      	bne.n	714 <main+0x44>
		get_date_string();
 71a:	47b0      	blx	r6
		uart_write(&DateString,17);
 71c:	2111      	movs	r1, #17
 71e:	0028      	movs	r0, r5
 720:	47a0      	blx	r4
	}
 722:	e7f6      	b.n	712 <main+0x42>
 724:	00000575 	.word	0x00000575
 728:	e000e100 	.word	0xe000e100
 72c:	00000755 	.word	0x00000755
 730:	00000799 	.word	0x00000799
 734:	00000585 	.word	0x00000585
 738:	00000945 	.word	0x00000945
 73c:	0000015d 	.word	0x0000015d
 740:	00000301 	.word	0x00000301
 744:	00000361 	.word	0x00000361
 748:	20000498 	.word	0x20000498
 74c:	000009a5 	.word	0x000009a5
 750:	001e8480 	.word	0x001e8480

00000754 <InitPorts>:
#include "Includes/settings.h"

#include "sam.h"

void InitPorts()
{
 754:	b510      	push	{r4, lr}
	//Init I2C
	//PA08 SERCOM0/PAD[0] Multiplex C SDA
	//PA09 SERCOM0/PAD[1] Multiplex C SCL
	PORT->Group[0].PINCFG[8].bit.PMUXEN = 1;
 756:	4b0f      	ldr	r3, [pc, #60]	; (794 <InitPorts+0x40>)
 758:	2048      	movs	r0, #72	; 0x48
 75a:	5c19      	ldrb	r1, [r3, r0]
 75c:	2201      	movs	r2, #1
 75e:	4311      	orrs	r1, r2
 760:	5419      	strb	r1, [r3, r0]
	PORT->Group[0].PINCFG[9].bit.PMUXEN = 1;
 762:	3001      	adds	r0, #1
 764:	5c19      	ldrb	r1, [r3, r0]
 766:	4311      	orrs	r1, r2
 768:	5419      	strb	r1, [r3, r0]
	PORT->Group[0].PMUX[4].reg = PORT_PMUX_PMUXE(0x2) | PORT_PMUX_PMUXO(0x2);
 76a:	3827      	subs	r0, #39	; 0x27
 76c:	2134      	movs	r1, #52	; 0x34
 76e:	5458      	strb	r0, [r3, r1]
	
	//Init Uart Virtual COMPORT
	//PA22 SERCOM3/PAD[0] Multiplex C Tx
	//PA23 SERCOM3/PAD[1] Multiplex C Rx
	PORT->Group[0].PINCFG[22].bit.PMUXEN = 1;
 770:	2456      	movs	r4, #86	; 0x56
 772:	5d19      	ldrb	r1, [r3, r4]
 774:	4311      	orrs	r1, r2
 776:	5519      	strb	r1, [r3, r4]
	PORT->Group[0].PINCFG[23].bit.PMUXEN = 1;
 778:	3401      	adds	r4, #1
 77a:	5d19      	ldrb	r1, [r3, r4]
 77c:	4311      	orrs	r1, r2
 77e:	5519      	strb	r1, [r3, r4]
	PORT->Group[0].PMUX[11].reg = PORT_PMUX_PMUXE(0x2) | PORT_PMUX_PMUXO(0x2);
 780:	213b      	movs	r1, #59	; 0x3b
 782:	5458      	strb	r0, [r3, r1]
	
	//Pin PB14 GCLK_IO[0]
	PORT->Group[1].PINCFG[14].bit.PMUXEN = 1;
 784:	3193      	adds	r1, #147	; 0x93
 786:	5c58      	ldrb	r0, [r3, r1]
 788:	4302      	orrs	r2, r0
 78a:	545a      	strb	r2, [r3, r1]
	PORT->Group[1].PMUX[14/2].reg = PORT_PMUX_PMUXE(0x7);
 78c:	39c7      	subs	r1, #199	; 0xc7
 78e:	22b7      	movs	r2, #183	; 0xb7
 790:	5499      	strb	r1, [r3, r2]
}
 792:	bd10      	pop	{r4, pc}
 794:	41004400 	.word	0x41004400

00000798 <InitClocks>:

void InitClocks()
{	
	SYSCTRL->OSC8M.bit.PRESC = 0x0;
 798:	4a08      	ldr	r2, [pc, #32]	; (7bc <InitClocks+0x24>)
 79a:	6a11      	ldr	r1, [r2, #32]
 79c:	4b08      	ldr	r3, [pc, #32]	; (7c0 <InitClocks+0x28>)
 79e:	400b      	ands	r3, r1
 7a0:	6213      	str	r3, [r2, #32]
	
	GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(0x00) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_OE | GCLK_GENCTRL_SRC_OSC8M;
 7a2:	4b08      	ldr	r3, [pc, #32]	; (7c4 <InitClocks+0x2c>)
 7a4:	4a08      	ldr	r2, [pc, #32]	; (7c8 <InitClocks+0x30>)
 7a6:	605a      	str	r2, [r3, #4]
	//Clock to SERCOM0 I2C
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_SERCOM0_CORE;
 7a8:	4a08      	ldr	r2, [pc, #32]	; (7cc <InitClocks+0x34>)
 7aa:	805a      	strh	r2, [r3, #2]
	//Clock to SERCOM3 UART
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_SERCOM3_CORE;
 7ac:	4a08      	ldr	r2, [pc, #32]	; (7d0 <InitClocks+0x38>)
 7ae:	805a      	strh	r2, [r3, #2]
	
	while (GCLK->STATUS.bit.SYNCBUSY){}
 7b0:	001a      	movs	r2, r3
 7b2:	7853      	ldrb	r3, [r2, #1]
 7b4:	09db      	lsrs	r3, r3, #7
 7b6:	d1fc      	bne.n	7b2 <InitClocks+0x1a>
}
 7b8:	4770      	bx	lr
 7ba:	46c0      	nop			; (mov r8, r8)
 7bc:	40000800 	.word	0x40000800
 7c0:	fffffcff 	.word	0xfffffcff
 7c4:	40000c00 	.word	0x40000c00
 7c8:	00090600 	.word	0x00090600
 7cc:	00004014 	.word	0x00004014
 7d0:	00004017 	.word	0x00004017

000007d4 <Value2String>:

// ---------------------------------------------------------------------------
//  Value2String
// ---------------------------------------------------------------------------
void Value2String( int16_t Value, uint8_t *DestPtr, uint8_t Stellen)
{
 7d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 7d6:	4647      	mov	r7, r8
 7d8:	b480      	push	{r7}
 7da:	0004      	movs	r4, r0
 7dc:	000d      	movs	r5, r1
	uint8_t ValueIsZero=1;

	if (Value<0)
 7de:	2800      	cmp	r0, #0
 7e0:	da06      	bge.n	7f0 <Value2String+0x1c>
	{
		*DestPtr = '-';
 7e2:	232d      	movs	r3, #45	; 0x2d
 7e4:	700b      	strb	r3, [r1, #0]
		Value *= -1;
 7e6:	4244      	negs	r4, r0
 7e8:	b224      	sxth	r4, r4
		Stellen--;
 7ea:	3a01      	subs	r2, #1
 7ec:	b2d2      	uxtb	r2, r2
		DestPtr++;
 7ee:	3501      	adds	r5, #1
	}
	
	if (Stellen==4)
 7f0:	2a04      	cmp	r2, #4
 7f2:	d12c      	bne.n	84e <Value2String+0x7a>
 7f4:	1c26      	adds	r6, r4, #0
 7f6:	4b4d      	ldr	r3, [pc, #308]	; (92c <Value2String+0x158>)
 7f8:	429c      	cmp	r4, r3
 7fa:	dd01      	ble.n	800 <Value2String+0x2c>
 7fc:	4b4c      	ldr	r3, [pc, #304]	; (930 <Value2String+0x15c>)
 7fe:	881e      	ldrh	r6, [r3, #0]
 800:	b234      	sxth	r4, r6
	{
		if (Value>9999)
		{
			Value = 9999;
		}
		*DestPtr = Value/1000;
 802:	21fa      	movs	r1, #250	; 0xfa
 804:	0089      	lsls	r1, r1, #2
 806:	0020      	movs	r0, r4
 808:	4b4a      	ldr	r3, [pc, #296]	; (934 <Value2String+0x160>)
 80a:	4798      	blx	r3
 80c:	b200      	sxth	r0, r0
 80e:	b2c3      	uxtb	r3, r0
 810:	702b      	strb	r3, [r5, #0]
		if (*DestPtr)
 812:	2b00      	cmp	r3, #0
 814:	d05f      	beq.n	8d6 <Value2String+0x102>
		{
			Value -= (uint16_t)*DestPtr * 1000;
 816:	22ff      	movs	r2, #255	; 0xff
 818:	4010      	ands	r0, r2
 81a:	4c47      	ldr	r4, [pc, #284]	; (938 <Value2String+0x164>)
 81c:	4360      	muls	r0, r4
 81e:	1986      	adds	r6, r0, r6
 820:	b234      	sxth	r4, r6
		{
			*DestPtr = ' ';
		}
		else
		{
			*DestPtr += '0';
 822:	3330      	adds	r3, #48	; 0x30
 824:	702b      	strb	r3, [r5, #0]
		}
		*DestPtr = Value/1000;
		if (*DestPtr)
		{
			Value -= (uint16_t)*DestPtr * 1000;
			ValueIsZero = 0;
 826:	2300      	movs	r3, #0
 828:	4698      	mov	r8, r3
		else
		{
			*DestPtr += '0';
		}
		Stellen--;
		DestPtr++;
 82a:	1c6f      	adds	r7, r5, #1
 82c:	1c26      	adds	r6, r4, #0
 82e:	4b43      	ldr	r3, [pc, #268]	; (93c <Value2String+0x168>)
 830:	429c      	cmp	r4, r3
 832:	dd01      	ble.n	838 <Value2String+0x64>
 834:	4b42      	ldr	r3, [pc, #264]	; (940 <Value2String+0x16c>)
 836:	881e      	ldrh	r6, [r3, #0]
 838:	b236      	sxth	r6, r6
	{
		if (Value>999)
		{
			Value = 999;
		}
		*DestPtr = Value/100;
 83a:	2164      	movs	r1, #100	; 0x64
 83c:	0030      	movs	r0, r6
 83e:	4b3d      	ldr	r3, [pc, #244]	; (934 <Value2String+0x160>)
 840:	4798      	blx	r3
 842:	b200      	sxth	r0, r0
 844:	b2c3      	uxtb	r3, r0
 846:	706b      	strb	r3, [r5, #1]
		if (*DestPtr)
 848:	2b00      	cmp	r3, #0
 84a:	d104      	bne.n	856 <Value2String+0x82>
 84c:	e00b      	b.n	866 <Value2String+0x92>
		Stellen--;
		DestPtr++;
	}

	
	if (Stellen==3)
 84e:	2a03      	cmp	r2, #3
 850:	d123      	bne.n	89a <Value2String+0xc6>
 852:	e045      	b.n	8e0 <Value2String+0x10c>
		if (Value>999)
		{
			Value = 999;
		}
		*DestPtr = Value/100;
		if (*DestPtr)
 854:	002f      	movs	r7, r5
		{
			Value -= (uint16_t)*DestPtr * 100;
 856:	22ff      	movs	r2, #255	; 0xff
 858:	4010      	ands	r0, r2
 85a:	3a64      	subs	r2, #100	; 0x64
 85c:	3aff      	subs	r2, #255	; 0xff
 85e:	4350      	muls	r0, r2
 860:	1986      	adds	r6, r0, r6
 862:	b236      	sxth	r6, r6
 864:	e005      	b.n	872 <Value2String+0x9e>
			ValueIsZero = 0;
		}
		if (ValueIsZero)
 866:	4642      	mov	r2, r8
 868:	2a00      	cmp	r2, #0
 86a:	d002      	beq.n	872 <Value2String+0x9e>
		{
			*DestPtr = ' ';
 86c:	2320      	movs	r3, #32
 86e:	703b      	strb	r3, [r7, #0]
 870:	e003      	b.n	87a <Value2String+0xa6>
		}
		else
		{
			*DestPtr += '0';
 872:	3330      	adds	r3, #48	; 0x30
 874:	703b      	strb	r3, [r7, #0]
 876:	2300      	movs	r3, #0
 878:	4698      	mov	r8, r3
		}
		DestPtr++;
 87a:	1c7d      	adds	r5, r7, #1
 87c:	1c34      	adds	r4, r6, #0
 87e:	2e63      	cmp	r6, #99	; 0x63
 880:	dd00      	ble.n	884 <Value2String+0xb0>
 882:	2463      	movs	r4, #99	; 0x63
 884:	b224      	sxth	r4, r4
	{
		if (Value>99)
		{
			Value = 99;
		}
		*DestPtr = Value/10;
 886:	210a      	movs	r1, #10
 888:	0020      	movs	r0, r4
 88a:	4b2a      	ldr	r3, [pc, #168]	; (934 <Value2String+0x160>)
 88c:	4798      	blx	r3
 88e:	b200      	sxth	r0, r0
 890:	b2c3      	uxtb	r3, r0
 892:	707b      	strb	r3, [r7, #1]
		if (*DestPtr)
 894:	2b00      	cmp	r3, #0
 896:	d103      	bne.n	8a0 <Value2String+0xcc>
 898:	e00a      	b.n	8b0 <Value2String+0xdc>
		DestPtr++;
		Stellen--;
	}
	
	
	if (Stellen==2)
 89a:	2a02      	cmp	r2, #2
 89c:	d112      	bne.n	8c4 <Value2String+0xf0>
 89e:	e033      	b.n	908 <Value2String+0x134>
			Value = 99;
		}
		*DestPtr = Value/10;
		if (*DestPtr)
		{
			Value -= (uint16_t)*DestPtr * 10;
 8a0:	22ff      	movs	r2, #255	; 0xff
 8a2:	4010      	ands	r0, r2
 8a4:	3a0a      	subs	r2, #10
 8a6:	3aff      	subs	r2, #255	; 0xff
 8a8:	4350      	muls	r0, r2
 8aa:	1904      	adds	r4, r0, r4
 8ac:	b224      	sxth	r4, r4
 8ae:	e005      	b.n	8bc <Value2String+0xe8>
			ValueIsZero = 0;
		}
		if (ValueIsZero)
 8b0:	4642      	mov	r2, r8
 8b2:	2a00      	cmp	r2, #0
 8b4:	d002      	beq.n	8bc <Value2String+0xe8>
		{
			*DestPtr = ' ';
 8b6:	2320      	movs	r3, #32
 8b8:	702b      	strb	r3, [r5, #0]
 8ba:	e001      	b.n	8c0 <Value2String+0xec>
		}
		else
		{
			*DestPtr += '0';
 8bc:	3330      	adds	r3, #48	; 0x30
 8be:	702b      	strb	r3, [r5, #0]
		}
		DestPtr++;
 8c0:	3501      	adds	r5, #1
 8c2:	e001      	b.n	8c8 <Value2String+0xf4>
		Stellen--;
	}
	
	if (Stellen==1)
 8c4:	2a01      	cmp	r2, #1
 8c6:	d12e      	bne.n	926 <Value2String+0x152>
	{
		if (Value>9)
		{
			Value = 9;
		}
		*DestPtr = Value+'0';
 8c8:	1c23      	adds	r3, r4, #0
 8ca:	2c09      	cmp	r4, #9
 8cc:	dd00      	ble.n	8d0 <Value2String+0xfc>
 8ce:	2309      	movs	r3, #9
 8d0:	3330      	adds	r3, #48	; 0x30
 8d2:	702b      	strb	r3, [r5, #0]
	}
 8d4:	e027      	b.n	926 <Value2String+0x152>
			Value -= (uint16_t)*DestPtr * 1000;
			ValueIsZero = 0;
		}
		if (ValueIsZero)
		{
			*DestPtr = ' ';
 8d6:	2320      	movs	r3, #32
 8d8:	702b      	strb	r3, [r5, #0]
// ---------------------------------------------------------------------------
//  Value2String
// ---------------------------------------------------------------------------
void Value2String( int16_t Value, uint8_t *DestPtr, uint8_t Stellen)
{
	uint8_t ValueIsZero=1;
 8da:	3b1f      	subs	r3, #31
 8dc:	4698      	mov	r8, r3
 8de:	e7a4      	b.n	82a <Value2String+0x56>
 8e0:	1c26      	adds	r6, r4, #0
 8e2:	4b16      	ldr	r3, [pc, #88]	; (93c <Value2String+0x168>)
 8e4:	429c      	cmp	r4, r3
 8e6:	dd01      	ble.n	8ec <Value2String+0x118>
 8e8:	4b15      	ldr	r3, [pc, #84]	; (940 <Value2String+0x16c>)
 8ea:	881e      	ldrh	r6, [r3, #0]
 8ec:	b236      	sxth	r6, r6
	{
		if (Value>999)
		{
			Value = 999;
		}
		*DestPtr = Value/100;
 8ee:	2164      	movs	r1, #100	; 0x64
 8f0:	0030      	movs	r0, r6
 8f2:	4b10      	ldr	r3, [pc, #64]	; (934 <Value2String+0x160>)
 8f4:	4798      	blx	r3
 8f6:	b200      	sxth	r0, r0
 8f8:	b2c3      	uxtb	r3, r0
 8fa:	702b      	strb	r3, [r5, #0]
		if (*DestPtr)
 8fc:	2b00      	cmp	r3, #0
 8fe:	d1a9      	bne.n	854 <Value2String+0x80>
 900:	002f      	movs	r7, r5
// ---------------------------------------------------------------------------
//  Value2String
// ---------------------------------------------------------------------------
void Value2String( int16_t Value, uint8_t *DestPtr, uint8_t Stellen)
{
	uint8_t ValueIsZero=1;
 902:	3301      	adds	r3, #1
 904:	4698      	mov	r8, r3
 906:	e7b1      	b.n	86c <Value2String+0x98>
 908:	1c23      	adds	r3, r4, #0
 90a:	2c63      	cmp	r4, #99	; 0x63
 90c:	dd00      	ble.n	910 <Value2String+0x13c>
 90e:	2363      	movs	r3, #99	; 0x63
 910:	b21c      	sxth	r4, r3
	{
		if (Value>99)
		{
			Value = 99;
		}
		*DestPtr = Value/10;
 912:	210a      	movs	r1, #10
 914:	0020      	movs	r0, r4
 916:	4b07      	ldr	r3, [pc, #28]	; (934 <Value2String+0x160>)
 918:	4798      	blx	r3
 91a:	b200      	sxth	r0, r0
 91c:	b2c3      	uxtb	r3, r0
 91e:	702b      	strb	r3, [r5, #0]
		if (*DestPtr)
 920:	2b00      	cmp	r3, #0
 922:	d1bd      	bne.n	8a0 <Value2String+0xcc>
 924:	e7c7      	b.n	8b6 <Value2String+0xe2>
		{
			Value = 9;
		}
		*DestPtr = Value+'0';
	}
 926:	bc04      	pop	{r2}
 928:	4690      	mov	r8, r2
 92a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 92c:	0000270f 	.word	0x0000270f
 930:	00000e84 	.word	0x00000e84
 934:	00000b35 	.word	0x00000b35
 938:	fffffc18 	.word	0xfffffc18
 93c:	000003e7 	.word	0x000003e7
 940:	00000e86 	.word	0x00000e86

00000944 <InitUART>:
#include "Includes/main.h"
#include "Includes/uart.h"

void InitUART(void)
{
	PM->APBCMASK.bit.SERCOM3_ = 1;
 944:	4a13      	ldr	r2, [pc, #76]	; (994 <InitUART+0x50>)
 946:	6a11      	ldr	r1, [r2, #32]
 948:	2320      	movs	r3, #32
 94a:	430b      	orrs	r3, r1
 94c:	6213      	str	r3, [r2, #32]
	//Disable USART
	SERCOM3->USART.CTRLA.bit.ENABLE = 0;
 94e:	4b12      	ldr	r3, [pc, #72]	; (998 <InitUART+0x54>)
 950:	681a      	ldr	r2, [r3, #0]
 952:	2102      	movs	r1, #2
 954:	438a      	bics	r2, r1
 956:	601a      	str	r2, [r3, #0]
	
	//Mode: USART with internal Clock
	//LSB FIRST
	//RXPO: SERCOM PAD[1] is used for data reception (0x3)
	//TXPO: TxD Pin Location is SERCOM PAD[0] (0x2)
	SERCOM3->USART.CTRLA.reg |= SERCOM_USART_CTRLA_MODE(1)		|
 958:	681a      	ldr	r2, [r3, #0]
 95a:	4910      	ldr	r1, [pc, #64]	; (99c <InitUART+0x58>)
 95c:	430a      	orrs	r2, r1
 95e:	601a      	str	r2, [r3, #0]
								SERCOM_USART_CTRLA_DORD			|
								SERCOM_USART_CTRLA_RXPO(0x1)	|
								SERCOM_USART_CTRLA_TXPO(0x0);
								
	//Set Baudrate to 115200
	SERCOM3->USART.BAUD.reg |= SERCOM_USART_BAUD_BAUD(0xC504);
 960:	8999      	ldrh	r1, [r3, #12]
 962:	4a0f      	ldr	r2, [pc, #60]	; (9a0 <InitUART+0x5c>)
 964:	430a      	orrs	r2, r1
 966:	819a      	strh	r2, [r3, #12]
	
	//Enable Rx and Tx
	SERCOM3->USART.CTRLB.reg |= SERCOM_USART_CTRLB_RXEN |
 968:	685a      	ldr	r2, [r3, #4]
 96a:	21c0      	movs	r1, #192	; 0xc0
 96c:	0289      	lsls	r1, r1, #10
 96e:	430a      	orrs	r2, r1
 970:	605a      	str	r2, [r3, #4]
								SERCOM_USART_CTRLB_TXEN;
	while (SERCOM3->USART.SYNCBUSY.reg);
 972:	001a      	movs	r2, r3
 974:	69d3      	ldr	r3, [r2, #28]
 976:	2b00      	cmp	r3, #0
 978:	d1fc      	bne.n	974 <InitUART+0x30>
	
	SERCOM3->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
 97a:	4b07      	ldr	r3, [pc, #28]	; (998 <InitUART+0x54>)
 97c:	2204      	movs	r2, #4
 97e:	759a      	strb	r2, [r3, #22]

	//Enable USART
	SERCOM3->USART.CTRLA.bit.ENABLE = 1; // |= SERCOM_USART_CTRLA_ENABLE;
 980:	6819      	ldr	r1, [r3, #0]
 982:	3a02      	subs	r2, #2
 984:	430a      	orrs	r2, r1
 986:	601a      	str	r2, [r3, #0]
	while (SERCOM3->USART.SYNCBUSY.bit.ENABLE);
 988:	001a      	movs	r2, r3
 98a:	69d3      	ldr	r3, [r2, #28]
 98c:	079b      	lsls	r3, r3, #30
 98e:	d4fc      	bmi.n	98a <InitUART+0x46>
}
 990:	4770      	bx	lr
 992:	46c0      	nop			; (mov r8, r8)
 994:	40000400 	.word	0x40000400
 998:	42001400 	.word	0x42001400
 99c:	40100004 	.word	0x40100004
 9a0:	0000c504 	.word	0x0000c504

000009a4 <uart_write>:

void uart_write(uint8_t *data, uint8_t size)
{
 9a4:	b510      	push	{r4, lr}
	for (uint16_t i=0;i<size;i++)
 9a6:	b289      	uxth	r1, r1
 9a8:	2900      	cmp	r1, #0
 9aa:	d00d      	beq.n	9c8 <uart_write+0x24>
 9ac:	0004      	movs	r4, r0
 9ae:	3901      	subs	r1, #1
 9b0:	b289      	uxth	r1, r1
 9b2:	3101      	adds	r1, #1
 9b4:	1840      	adds	r0, r0, r1
	{
		while(SERCOM3->USART.INTFLAG.bit.DRE == 0);
 9b6:	4a05      	ldr	r2, [pc, #20]	; (9cc <uart_write+0x28>)
 9b8:	7e13      	ldrb	r3, [r2, #24]
 9ba:	07db      	lsls	r3, r3, #31
 9bc:	d5fc      	bpl.n	9b8 <uart_write+0x14>
		SERCOM3->USART.DATA.reg = data[i];
 9be:	7823      	ldrb	r3, [r4, #0]
 9c0:	8513      	strh	r3, [r2, #40]	; 0x28
 9c2:	3401      	adds	r4, #1
	while (SERCOM3->USART.SYNCBUSY.bit.ENABLE);
}

void uart_write(uint8_t *data, uint8_t size)
{
	for (uint16_t i=0;i<size;i++)
 9c4:	4284      	cmp	r4, r0
 9c6:	d1f7      	bne.n	9b8 <uart_write+0x14>
	{
		while(SERCOM3->USART.INTFLAG.bit.DRE == 0);
		SERCOM3->USART.DATA.reg = data[i];
	}
}
 9c8:	bd10      	pop	{r4, pc}
 9ca:	46c0      	nop			; (mov r8, r8)
 9cc:	42001400 	.word	0x42001400

000009d0 <SERCOM3_Handler>:

void SERCOM3_Handler()
{
		recievedata[recieve_counter] = SERCOM3->USART.DATA.reg;
 9d0:	490f      	ldr	r1, [pc, #60]	; (a10 <SERCOM3_Handler+0x40>)
 9d2:	780b      	ldrb	r3, [r1, #0]
 9d4:	b2db      	uxtb	r3, r3
 9d6:	4a0f      	ldr	r2, [pc, #60]	; (a14 <SERCOM3_Handler+0x44>)
 9d8:	8d10      	ldrh	r0, [r2, #40]	; 0x28
 9da:	4a0f      	ldr	r2, [pc, #60]	; (a18 <SERCOM3_Handler+0x48>)
 9dc:	54d0      	strb	r0, [r2, r3]

	if (recievedata[recieve_counter] == '\r')
 9de:	780b      	ldrb	r3, [r1, #0]
 9e0:	b2db      	uxtb	r3, r3
 9e2:	5cd3      	ldrb	r3, [r2, r3]
 9e4:	2b0d      	cmp	r3, #13
 9e6:	d10a      	bne.n	9fe <SERCOM3_Handler+0x2e>
	{
		recievedata[recieve_counter] = 0;
 9e8:	000a      	movs	r2, r1
 9ea:	780b      	ldrb	r3, [r1, #0]
 9ec:	b2db      	uxtb	r3, r3
 9ee:	2100      	movs	r1, #0
 9f0:	4809      	ldr	r0, [pc, #36]	; (a18 <SERCOM3_Handler+0x48>)
 9f2:	54c1      	strb	r1, [r0, r3]
		recieve_counter = 0;
 9f4:	7011      	strb	r1, [r2, #0]
		new_data = 1;
 9f6:	2201      	movs	r2, #1
 9f8:	4b08      	ldr	r3, [pc, #32]	; (a1c <SERCOM3_Handler+0x4c>)
 9fa:	701a      	strb	r2, [r3, #0]
 9fc:	e007      	b.n	a0e <SERCOM3_Handler+0x3e>
	}
	else
	{
		recieve_counter++;
 9fe:	4a04      	ldr	r2, [pc, #16]	; (a10 <SERCOM3_Handler+0x40>)
 a00:	7813      	ldrb	r3, [r2, #0]
 a02:	3301      	adds	r3, #1
 a04:	b2db      	uxtb	r3, r3
 a06:	7013      	strb	r3, [r2, #0]
		new_data = 0;
 a08:	2200      	movs	r2, #0
 a0a:	4b04      	ldr	r3, [pc, #16]	; (a1c <SERCOM3_Handler+0x4c>)
 a0c:	701a      	strb	r2, [r3, #0]
	}
 a0e:	4770      	bx	lr
 a10:	200004ad 	.word	0x200004ad
 a14:	42001400 	.word	0x42001400
 a18:	20000454 	.word	0x20000454
 a1c:	20000450 	.word	0x20000450

00000a20 <__aeabi_uidiv>:
 a20:	2200      	movs	r2, #0
 a22:	0843      	lsrs	r3, r0, #1
 a24:	428b      	cmp	r3, r1
 a26:	d374      	bcc.n	b12 <__aeabi_uidiv+0xf2>
 a28:	0903      	lsrs	r3, r0, #4
 a2a:	428b      	cmp	r3, r1
 a2c:	d35f      	bcc.n	aee <__aeabi_uidiv+0xce>
 a2e:	0a03      	lsrs	r3, r0, #8
 a30:	428b      	cmp	r3, r1
 a32:	d344      	bcc.n	abe <__aeabi_uidiv+0x9e>
 a34:	0b03      	lsrs	r3, r0, #12
 a36:	428b      	cmp	r3, r1
 a38:	d328      	bcc.n	a8c <__aeabi_uidiv+0x6c>
 a3a:	0c03      	lsrs	r3, r0, #16
 a3c:	428b      	cmp	r3, r1
 a3e:	d30d      	bcc.n	a5c <__aeabi_uidiv+0x3c>
 a40:	22ff      	movs	r2, #255	; 0xff
 a42:	0209      	lsls	r1, r1, #8
 a44:	ba12      	rev	r2, r2
 a46:	0c03      	lsrs	r3, r0, #16
 a48:	428b      	cmp	r3, r1
 a4a:	d302      	bcc.n	a52 <__aeabi_uidiv+0x32>
 a4c:	1212      	asrs	r2, r2, #8
 a4e:	0209      	lsls	r1, r1, #8
 a50:	d065      	beq.n	b1e <__aeabi_uidiv+0xfe>
 a52:	0b03      	lsrs	r3, r0, #12
 a54:	428b      	cmp	r3, r1
 a56:	d319      	bcc.n	a8c <__aeabi_uidiv+0x6c>
 a58:	e000      	b.n	a5c <__aeabi_uidiv+0x3c>
 a5a:	0a09      	lsrs	r1, r1, #8
 a5c:	0bc3      	lsrs	r3, r0, #15
 a5e:	428b      	cmp	r3, r1
 a60:	d301      	bcc.n	a66 <__aeabi_uidiv+0x46>
 a62:	03cb      	lsls	r3, r1, #15
 a64:	1ac0      	subs	r0, r0, r3
 a66:	4152      	adcs	r2, r2
 a68:	0b83      	lsrs	r3, r0, #14
 a6a:	428b      	cmp	r3, r1
 a6c:	d301      	bcc.n	a72 <__aeabi_uidiv+0x52>
 a6e:	038b      	lsls	r3, r1, #14
 a70:	1ac0      	subs	r0, r0, r3
 a72:	4152      	adcs	r2, r2
 a74:	0b43      	lsrs	r3, r0, #13
 a76:	428b      	cmp	r3, r1
 a78:	d301      	bcc.n	a7e <__aeabi_uidiv+0x5e>
 a7a:	034b      	lsls	r3, r1, #13
 a7c:	1ac0      	subs	r0, r0, r3
 a7e:	4152      	adcs	r2, r2
 a80:	0b03      	lsrs	r3, r0, #12
 a82:	428b      	cmp	r3, r1
 a84:	d301      	bcc.n	a8a <__aeabi_uidiv+0x6a>
 a86:	030b      	lsls	r3, r1, #12
 a88:	1ac0      	subs	r0, r0, r3
 a8a:	4152      	adcs	r2, r2
 a8c:	0ac3      	lsrs	r3, r0, #11
 a8e:	428b      	cmp	r3, r1
 a90:	d301      	bcc.n	a96 <__aeabi_uidiv+0x76>
 a92:	02cb      	lsls	r3, r1, #11
 a94:	1ac0      	subs	r0, r0, r3
 a96:	4152      	adcs	r2, r2
 a98:	0a83      	lsrs	r3, r0, #10
 a9a:	428b      	cmp	r3, r1
 a9c:	d301      	bcc.n	aa2 <__aeabi_uidiv+0x82>
 a9e:	028b      	lsls	r3, r1, #10
 aa0:	1ac0      	subs	r0, r0, r3
 aa2:	4152      	adcs	r2, r2
 aa4:	0a43      	lsrs	r3, r0, #9
 aa6:	428b      	cmp	r3, r1
 aa8:	d301      	bcc.n	aae <__aeabi_uidiv+0x8e>
 aaa:	024b      	lsls	r3, r1, #9
 aac:	1ac0      	subs	r0, r0, r3
 aae:	4152      	adcs	r2, r2
 ab0:	0a03      	lsrs	r3, r0, #8
 ab2:	428b      	cmp	r3, r1
 ab4:	d301      	bcc.n	aba <__aeabi_uidiv+0x9a>
 ab6:	020b      	lsls	r3, r1, #8
 ab8:	1ac0      	subs	r0, r0, r3
 aba:	4152      	adcs	r2, r2
 abc:	d2cd      	bcs.n	a5a <__aeabi_uidiv+0x3a>
 abe:	09c3      	lsrs	r3, r0, #7
 ac0:	428b      	cmp	r3, r1
 ac2:	d301      	bcc.n	ac8 <__aeabi_uidiv+0xa8>
 ac4:	01cb      	lsls	r3, r1, #7
 ac6:	1ac0      	subs	r0, r0, r3
 ac8:	4152      	adcs	r2, r2
 aca:	0983      	lsrs	r3, r0, #6
 acc:	428b      	cmp	r3, r1
 ace:	d301      	bcc.n	ad4 <__aeabi_uidiv+0xb4>
 ad0:	018b      	lsls	r3, r1, #6
 ad2:	1ac0      	subs	r0, r0, r3
 ad4:	4152      	adcs	r2, r2
 ad6:	0943      	lsrs	r3, r0, #5
 ad8:	428b      	cmp	r3, r1
 ada:	d301      	bcc.n	ae0 <__aeabi_uidiv+0xc0>
 adc:	014b      	lsls	r3, r1, #5
 ade:	1ac0      	subs	r0, r0, r3
 ae0:	4152      	adcs	r2, r2
 ae2:	0903      	lsrs	r3, r0, #4
 ae4:	428b      	cmp	r3, r1
 ae6:	d301      	bcc.n	aec <__aeabi_uidiv+0xcc>
 ae8:	010b      	lsls	r3, r1, #4
 aea:	1ac0      	subs	r0, r0, r3
 aec:	4152      	adcs	r2, r2
 aee:	08c3      	lsrs	r3, r0, #3
 af0:	428b      	cmp	r3, r1
 af2:	d301      	bcc.n	af8 <__aeabi_uidiv+0xd8>
 af4:	00cb      	lsls	r3, r1, #3
 af6:	1ac0      	subs	r0, r0, r3
 af8:	4152      	adcs	r2, r2
 afa:	0883      	lsrs	r3, r0, #2
 afc:	428b      	cmp	r3, r1
 afe:	d301      	bcc.n	b04 <__aeabi_uidiv+0xe4>
 b00:	008b      	lsls	r3, r1, #2
 b02:	1ac0      	subs	r0, r0, r3
 b04:	4152      	adcs	r2, r2
 b06:	0843      	lsrs	r3, r0, #1
 b08:	428b      	cmp	r3, r1
 b0a:	d301      	bcc.n	b10 <__aeabi_uidiv+0xf0>
 b0c:	004b      	lsls	r3, r1, #1
 b0e:	1ac0      	subs	r0, r0, r3
 b10:	4152      	adcs	r2, r2
 b12:	1a41      	subs	r1, r0, r1
 b14:	d200      	bcs.n	b18 <__aeabi_uidiv+0xf8>
 b16:	4601      	mov	r1, r0
 b18:	4152      	adcs	r2, r2
 b1a:	4610      	mov	r0, r2
 b1c:	4770      	bx	lr
 b1e:	e7ff      	b.n	b20 <__aeabi_uidiv+0x100>
 b20:	b501      	push	{r0, lr}
 b22:	2000      	movs	r0, #0
 b24:	f000 f8f0 	bl	d08 <__aeabi_idiv0>
 b28:	bd02      	pop	{r1, pc}
 b2a:	46c0      	nop			; (mov r8, r8)

00000b2c <__aeabi_uidivmod>:
 b2c:	2900      	cmp	r1, #0
 b2e:	d0f7      	beq.n	b20 <__aeabi_uidiv+0x100>
 b30:	e776      	b.n	a20 <__aeabi_uidiv>
 b32:	4770      	bx	lr

00000b34 <__aeabi_idiv>:
 b34:	4603      	mov	r3, r0
 b36:	430b      	orrs	r3, r1
 b38:	d47f      	bmi.n	c3a <__aeabi_idiv+0x106>
 b3a:	2200      	movs	r2, #0
 b3c:	0843      	lsrs	r3, r0, #1
 b3e:	428b      	cmp	r3, r1
 b40:	d374      	bcc.n	c2c <__aeabi_idiv+0xf8>
 b42:	0903      	lsrs	r3, r0, #4
 b44:	428b      	cmp	r3, r1
 b46:	d35f      	bcc.n	c08 <__aeabi_idiv+0xd4>
 b48:	0a03      	lsrs	r3, r0, #8
 b4a:	428b      	cmp	r3, r1
 b4c:	d344      	bcc.n	bd8 <__aeabi_idiv+0xa4>
 b4e:	0b03      	lsrs	r3, r0, #12
 b50:	428b      	cmp	r3, r1
 b52:	d328      	bcc.n	ba6 <__aeabi_idiv+0x72>
 b54:	0c03      	lsrs	r3, r0, #16
 b56:	428b      	cmp	r3, r1
 b58:	d30d      	bcc.n	b76 <__aeabi_idiv+0x42>
 b5a:	22ff      	movs	r2, #255	; 0xff
 b5c:	0209      	lsls	r1, r1, #8
 b5e:	ba12      	rev	r2, r2
 b60:	0c03      	lsrs	r3, r0, #16
 b62:	428b      	cmp	r3, r1
 b64:	d302      	bcc.n	b6c <__aeabi_idiv+0x38>
 b66:	1212      	asrs	r2, r2, #8
 b68:	0209      	lsls	r1, r1, #8
 b6a:	d065      	beq.n	c38 <__aeabi_idiv+0x104>
 b6c:	0b03      	lsrs	r3, r0, #12
 b6e:	428b      	cmp	r3, r1
 b70:	d319      	bcc.n	ba6 <__aeabi_idiv+0x72>
 b72:	e000      	b.n	b76 <__aeabi_idiv+0x42>
 b74:	0a09      	lsrs	r1, r1, #8
 b76:	0bc3      	lsrs	r3, r0, #15
 b78:	428b      	cmp	r3, r1
 b7a:	d301      	bcc.n	b80 <__aeabi_idiv+0x4c>
 b7c:	03cb      	lsls	r3, r1, #15
 b7e:	1ac0      	subs	r0, r0, r3
 b80:	4152      	adcs	r2, r2
 b82:	0b83      	lsrs	r3, r0, #14
 b84:	428b      	cmp	r3, r1
 b86:	d301      	bcc.n	b8c <__aeabi_idiv+0x58>
 b88:	038b      	lsls	r3, r1, #14
 b8a:	1ac0      	subs	r0, r0, r3
 b8c:	4152      	adcs	r2, r2
 b8e:	0b43      	lsrs	r3, r0, #13
 b90:	428b      	cmp	r3, r1
 b92:	d301      	bcc.n	b98 <__aeabi_idiv+0x64>
 b94:	034b      	lsls	r3, r1, #13
 b96:	1ac0      	subs	r0, r0, r3
 b98:	4152      	adcs	r2, r2
 b9a:	0b03      	lsrs	r3, r0, #12
 b9c:	428b      	cmp	r3, r1
 b9e:	d301      	bcc.n	ba4 <__aeabi_idiv+0x70>
 ba0:	030b      	lsls	r3, r1, #12
 ba2:	1ac0      	subs	r0, r0, r3
 ba4:	4152      	adcs	r2, r2
 ba6:	0ac3      	lsrs	r3, r0, #11
 ba8:	428b      	cmp	r3, r1
 baa:	d301      	bcc.n	bb0 <__aeabi_idiv+0x7c>
 bac:	02cb      	lsls	r3, r1, #11
 bae:	1ac0      	subs	r0, r0, r3
 bb0:	4152      	adcs	r2, r2
 bb2:	0a83      	lsrs	r3, r0, #10
 bb4:	428b      	cmp	r3, r1
 bb6:	d301      	bcc.n	bbc <__aeabi_idiv+0x88>
 bb8:	028b      	lsls	r3, r1, #10
 bba:	1ac0      	subs	r0, r0, r3
 bbc:	4152      	adcs	r2, r2
 bbe:	0a43      	lsrs	r3, r0, #9
 bc0:	428b      	cmp	r3, r1
 bc2:	d301      	bcc.n	bc8 <__aeabi_idiv+0x94>
 bc4:	024b      	lsls	r3, r1, #9
 bc6:	1ac0      	subs	r0, r0, r3
 bc8:	4152      	adcs	r2, r2
 bca:	0a03      	lsrs	r3, r0, #8
 bcc:	428b      	cmp	r3, r1
 bce:	d301      	bcc.n	bd4 <__aeabi_idiv+0xa0>
 bd0:	020b      	lsls	r3, r1, #8
 bd2:	1ac0      	subs	r0, r0, r3
 bd4:	4152      	adcs	r2, r2
 bd6:	d2cd      	bcs.n	b74 <__aeabi_idiv+0x40>
 bd8:	09c3      	lsrs	r3, r0, #7
 bda:	428b      	cmp	r3, r1
 bdc:	d301      	bcc.n	be2 <__aeabi_idiv+0xae>
 bde:	01cb      	lsls	r3, r1, #7
 be0:	1ac0      	subs	r0, r0, r3
 be2:	4152      	adcs	r2, r2
 be4:	0983      	lsrs	r3, r0, #6
 be6:	428b      	cmp	r3, r1
 be8:	d301      	bcc.n	bee <__aeabi_idiv+0xba>
 bea:	018b      	lsls	r3, r1, #6
 bec:	1ac0      	subs	r0, r0, r3
 bee:	4152      	adcs	r2, r2
 bf0:	0943      	lsrs	r3, r0, #5
 bf2:	428b      	cmp	r3, r1
 bf4:	d301      	bcc.n	bfa <__aeabi_idiv+0xc6>
 bf6:	014b      	lsls	r3, r1, #5
 bf8:	1ac0      	subs	r0, r0, r3
 bfa:	4152      	adcs	r2, r2
 bfc:	0903      	lsrs	r3, r0, #4
 bfe:	428b      	cmp	r3, r1
 c00:	d301      	bcc.n	c06 <__aeabi_idiv+0xd2>
 c02:	010b      	lsls	r3, r1, #4
 c04:	1ac0      	subs	r0, r0, r3
 c06:	4152      	adcs	r2, r2
 c08:	08c3      	lsrs	r3, r0, #3
 c0a:	428b      	cmp	r3, r1
 c0c:	d301      	bcc.n	c12 <__aeabi_idiv+0xde>
 c0e:	00cb      	lsls	r3, r1, #3
 c10:	1ac0      	subs	r0, r0, r3
 c12:	4152      	adcs	r2, r2
 c14:	0883      	lsrs	r3, r0, #2
 c16:	428b      	cmp	r3, r1
 c18:	d301      	bcc.n	c1e <__aeabi_idiv+0xea>
 c1a:	008b      	lsls	r3, r1, #2
 c1c:	1ac0      	subs	r0, r0, r3
 c1e:	4152      	adcs	r2, r2
 c20:	0843      	lsrs	r3, r0, #1
 c22:	428b      	cmp	r3, r1
 c24:	d301      	bcc.n	c2a <__aeabi_idiv+0xf6>
 c26:	004b      	lsls	r3, r1, #1
 c28:	1ac0      	subs	r0, r0, r3
 c2a:	4152      	adcs	r2, r2
 c2c:	1a41      	subs	r1, r0, r1
 c2e:	d200      	bcs.n	c32 <__aeabi_idiv+0xfe>
 c30:	4601      	mov	r1, r0
 c32:	4152      	adcs	r2, r2
 c34:	4610      	mov	r0, r2
 c36:	4770      	bx	lr
 c38:	e05d      	b.n	cf6 <__aeabi_idiv+0x1c2>
 c3a:	0fca      	lsrs	r2, r1, #31
 c3c:	d000      	beq.n	c40 <__aeabi_idiv+0x10c>
 c3e:	4249      	negs	r1, r1
 c40:	1003      	asrs	r3, r0, #32
 c42:	d300      	bcc.n	c46 <__aeabi_idiv+0x112>
 c44:	4240      	negs	r0, r0
 c46:	4053      	eors	r3, r2
 c48:	2200      	movs	r2, #0
 c4a:	469c      	mov	ip, r3
 c4c:	0903      	lsrs	r3, r0, #4
 c4e:	428b      	cmp	r3, r1
 c50:	d32d      	bcc.n	cae <__aeabi_idiv+0x17a>
 c52:	0a03      	lsrs	r3, r0, #8
 c54:	428b      	cmp	r3, r1
 c56:	d312      	bcc.n	c7e <__aeabi_idiv+0x14a>
 c58:	22fc      	movs	r2, #252	; 0xfc
 c5a:	0189      	lsls	r1, r1, #6
 c5c:	ba12      	rev	r2, r2
 c5e:	0a03      	lsrs	r3, r0, #8
 c60:	428b      	cmp	r3, r1
 c62:	d30c      	bcc.n	c7e <__aeabi_idiv+0x14a>
 c64:	0189      	lsls	r1, r1, #6
 c66:	1192      	asrs	r2, r2, #6
 c68:	428b      	cmp	r3, r1
 c6a:	d308      	bcc.n	c7e <__aeabi_idiv+0x14a>
 c6c:	0189      	lsls	r1, r1, #6
 c6e:	1192      	asrs	r2, r2, #6
 c70:	428b      	cmp	r3, r1
 c72:	d304      	bcc.n	c7e <__aeabi_idiv+0x14a>
 c74:	0189      	lsls	r1, r1, #6
 c76:	d03a      	beq.n	cee <__aeabi_idiv+0x1ba>
 c78:	1192      	asrs	r2, r2, #6
 c7a:	e000      	b.n	c7e <__aeabi_idiv+0x14a>
 c7c:	0989      	lsrs	r1, r1, #6
 c7e:	09c3      	lsrs	r3, r0, #7
 c80:	428b      	cmp	r3, r1
 c82:	d301      	bcc.n	c88 <__aeabi_idiv+0x154>
 c84:	01cb      	lsls	r3, r1, #7
 c86:	1ac0      	subs	r0, r0, r3
 c88:	4152      	adcs	r2, r2
 c8a:	0983      	lsrs	r3, r0, #6
 c8c:	428b      	cmp	r3, r1
 c8e:	d301      	bcc.n	c94 <__aeabi_idiv+0x160>
 c90:	018b      	lsls	r3, r1, #6
 c92:	1ac0      	subs	r0, r0, r3
 c94:	4152      	adcs	r2, r2
 c96:	0943      	lsrs	r3, r0, #5
 c98:	428b      	cmp	r3, r1
 c9a:	d301      	bcc.n	ca0 <__aeabi_idiv+0x16c>
 c9c:	014b      	lsls	r3, r1, #5
 c9e:	1ac0      	subs	r0, r0, r3
 ca0:	4152      	adcs	r2, r2
 ca2:	0903      	lsrs	r3, r0, #4
 ca4:	428b      	cmp	r3, r1
 ca6:	d301      	bcc.n	cac <__aeabi_idiv+0x178>
 ca8:	010b      	lsls	r3, r1, #4
 caa:	1ac0      	subs	r0, r0, r3
 cac:	4152      	adcs	r2, r2
 cae:	08c3      	lsrs	r3, r0, #3
 cb0:	428b      	cmp	r3, r1
 cb2:	d301      	bcc.n	cb8 <__aeabi_idiv+0x184>
 cb4:	00cb      	lsls	r3, r1, #3
 cb6:	1ac0      	subs	r0, r0, r3
 cb8:	4152      	adcs	r2, r2
 cba:	0883      	lsrs	r3, r0, #2
 cbc:	428b      	cmp	r3, r1
 cbe:	d301      	bcc.n	cc4 <__aeabi_idiv+0x190>
 cc0:	008b      	lsls	r3, r1, #2
 cc2:	1ac0      	subs	r0, r0, r3
 cc4:	4152      	adcs	r2, r2
 cc6:	d2d9      	bcs.n	c7c <__aeabi_idiv+0x148>
 cc8:	0843      	lsrs	r3, r0, #1
 cca:	428b      	cmp	r3, r1
 ccc:	d301      	bcc.n	cd2 <__aeabi_idiv+0x19e>
 cce:	004b      	lsls	r3, r1, #1
 cd0:	1ac0      	subs	r0, r0, r3
 cd2:	4152      	adcs	r2, r2
 cd4:	1a41      	subs	r1, r0, r1
 cd6:	d200      	bcs.n	cda <__aeabi_idiv+0x1a6>
 cd8:	4601      	mov	r1, r0
 cda:	4663      	mov	r3, ip
 cdc:	4152      	adcs	r2, r2
 cde:	105b      	asrs	r3, r3, #1
 ce0:	4610      	mov	r0, r2
 ce2:	d301      	bcc.n	ce8 <__aeabi_idiv+0x1b4>
 ce4:	4240      	negs	r0, r0
 ce6:	2b00      	cmp	r3, #0
 ce8:	d500      	bpl.n	cec <__aeabi_idiv+0x1b8>
 cea:	4249      	negs	r1, r1
 cec:	4770      	bx	lr
 cee:	4663      	mov	r3, ip
 cf0:	105b      	asrs	r3, r3, #1
 cf2:	d300      	bcc.n	cf6 <__aeabi_idiv+0x1c2>
 cf4:	4240      	negs	r0, r0
 cf6:	b501      	push	{r0, lr}
 cf8:	2000      	movs	r0, #0
 cfa:	f000 f805 	bl	d08 <__aeabi_idiv0>
 cfe:	bd02      	pop	{r1, pc}

00000d00 <__aeabi_idivmod>:
 d00:	2900      	cmp	r1, #0
 d02:	d0f8      	beq.n	cf6 <__aeabi_idiv+0x1c2>
 d04:	e716      	b.n	b34 <__aeabi_idiv>
 d06:	4770      	bx	lr

00000d08 <__aeabi_idiv0>:
 d08:	4770      	bx	lr
 d0a:	46c0      	nop			; (mov r8, r8)

00000d0c <__libc_init_array>:
 d0c:	b570      	push	{r4, r5, r6, lr}
 d0e:	4e0d      	ldr	r6, [pc, #52]	; (d44 <__libc_init_array+0x38>)
 d10:	4d0d      	ldr	r5, [pc, #52]	; (d48 <__libc_init_array+0x3c>)
 d12:	2400      	movs	r4, #0
 d14:	1bad      	subs	r5, r5, r6
 d16:	10ad      	asrs	r5, r5, #2
 d18:	d005      	beq.n	d26 <__libc_init_array+0x1a>
 d1a:	00a3      	lsls	r3, r4, #2
 d1c:	58f3      	ldr	r3, [r6, r3]
 d1e:	3401      	adds	r4, #1
 d20:	4798      	blx	r3
 d22:	42a5      	cmp	r5, r4
 d24:	d1f9      	bne.n	d1a <__libc_init_array+0xe>
 d26:	f000 f8b3 	bl	e90 <_init>
 d2a:	4e08      	ldr	r6, [pc, #32]	; (d4c <__libc_init_array+0x40>)
 d2c:	4d08      	ldr	r5, [pc, #32]	; (d50 <__libc_init_array+0x44>)
 d2e:	2400      	movs	r4, #0
 d30:	1bad      	subs	r5, r5, r6
 d32:	10ad      	asrs	r5, r5, #2
 d34:	d005      	beq.n	d42 <__libc_init_array+0x36>
 d36:	00a3      	lsls	r3, r4, #2
 d38:	58f3      	ldr	r3, [r6, r3]
 d3a:	3401      	adds	r4, #1
 d3c:	4798      	blx	r3
 d3e:	42a5      	cmp	r5, r4
 d40:	d1f9      	bne.n	d36 <__libc_init_array+0x2a>
 d42:	bd70      	pop	{r4, r5, r6, pc}
 d44:	00000e9c 	.word	0x00000e9c
 d48:	00000e9c 	.word	0x00000e9c
 d4c:	00000e9c 	.word	0x00000e9c
 d50:	00000ea4 	.word	0x00000ea4

00000d54 <register_fini>:
 d54:	4b03      	ldr	r3, [pc, #12]	; (d64 <register_fini+0x10>)
 d56:	b510      	push	{r4, lr}
 d58:	2b00      	cmp	r3, #0
 d5a:	d002      	beq.n	d62 <register_fini+0xe>
 d5c:	4802      	ldr	r0, [pc, #8]	; (d68 <register_fini+0x14>)
 d5e:	f000 f805 	bl	d6c <atexit>
 d62:	bd10      	pop	{r4, pc}
 d64:	00000000 	.word	0x00000000
 d68:	00000d7d 	.word	0x00000d7d

00000d6c <atexit>:
 d6c:	b510      	push	{r4, lr}
 d6e:	0001      	movs	r1, r0
 d70:	2300      	movs	r3, #0
 d72:	2200      	movs	r2, #0
 d74:	2000      	movs	r0, #0
 d76:	f000 f81b 	bl	db0 <__register_exitproc>
 d7a:	bd10      	pop	{r4, pc}

00000d7c <__libc_fini_array>:
 d7c:	b570      	push	{r4, r5, r6, lr}
 d7e:	4b09      	ldr	r3, [pc, #36]	; (da4 <__libc_fini_array+0x28>)
 d80:	4c09      	ldr	r4, [pc, #36]	; (da8 <__libc_fini_array+0x2c>)
 d82:	1ae4      	subs	r4, r4, r3
 d84:	10a4      	asrs	r4, r4, #2
 d86:	d009      	beq.n	d9c <__libc_fini_array+0x20>
 d88:	4a08      	ldr	r2, [pc, #32]	; (dac <__libc_fini_array+0x30>)
 d8a:	18a5      	adds	r5, r4, r2
 d8c:	00ad      	lsls	r5, r5, #2
 d8e:	18ed      	adds	r5, r5, r3
 d90:	682b      	ldr	r3, [r5, #0]
 d92:	3c01      	subs	r4, #1
 d94:	4798      	blx	r3
 d96:	3d04      	subs	r5, #4
 d98:	2c00      	cmp	r4, #0
 d9a:	d1f9      	bne.n	d90 <__libc_fini_array+0x14>
 d9c:	f000 f882 	bl	ea4 <_fini>
 da0:	bd70      	pop	{r4, r5, r6, pc}
 da2:	46c0      	nop			; (mov r8, r8)
 da4:	00000eb0 	.word	0x00000eb0
 da8:	00000eb4 	.word	0x00000eb4
 dac:	3fffffff 	.word	0x3fffffff

00000db0 <__register_exitproc>:
 db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 db2:	4644      	mov	r4, r8
 db4:	465f      	mov	r7, fp
 db6:	4656      	mov	r6, sl
 db8:	464d      	mov	r5, r9
 dba:	469b      	mov	fp, r3
 dbc:	4b2f      	ldr	r3, [pc, #188]	; (e7c <__register_exitproc+0xcc>)
 dbe:	b4f0      	push	{r4, r5, r6, r7}
 dc0:	681c      	ldr	r4, [r3, #0]
 dc2:	23a4      	movs	r3, #164	; 0xa4
 dc4:	005b      	lsls	r3, r3, #1
 dc6:	0005      	movs	r5, r0
 dc8:	58e0      	ldr	r0, [r4, r3]
 dca:	000e      	movs	r6, r1
 dcc:	4690      	mov	r8, r2
 dce:	2800      	cmp	r0, #0
 dd0:	d04b      	beq.n	e6a <__register_exitproc+0xba>
 dd2:	6843      	ldr	r3, [r0, #4]
 dd4:	2b1f      	cmp	r3, #31
 dd6:	dc0d      	bgt.n	df4 <__register_exitproc+0x44>
 dd8:	1c5c      	adds	r4, r3, #1
 dda:	2d00      	cmp	r5, #0
 ddc:	d121      	bne.n	e22 <__register_exitproc+0x72>
 dde:	3302      	adds	r3, #2
 de0:	009b      	lsls	r3, r3, #2
 de2:	6044      	str	r4, [r0, #4]
 de4:	501e      	str	r6, [r3, r0]
 de6:	2000      	movs	r0, #0
 de8:	bc3c      	pop	{r2, r3, r4, r5}
 dea:	4690      	mov	r8, r2
 dec:	4699      	mov	r9, r3
 dee:	46a2      	mov	sl, r4
 df0:	46ab      	mov	fp, r5
 df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 df4:	4b22      	ldr	r3, [pc, #136]	; (e80 <__register_exitproc+0xd0>)
 df6:	2b00      	cmp	r3, #0
 df8:	d03c      	beq.n	e74 <__register_exitproc+0xc4>
 dfa:	20c8      	movs	r0, #200	; 0xc8
 dfc:	0040      	lsls	r0, r0, #1
 dfe:	e000      	b.n	e02 <__register_exitproc+0x52>
 e00:	bf00      	nop
 e02:	2800      	cmp	r0, #0
 e04:	d036      	beq.n	e74 <__register_exitproc+0xc4>
 e06:	22a4      	movs	r2, #164	; 0xa4
 e08:	2300      	movs	r3, #0
 e0a:	0052      	lsls	r2, r2, #1
 e0c:	58a1      	ldr	r1, [r4, r2]
 e0e:	6043      	str	r3, [r0, #4]
 e10:	6001      	str	r1, [r0, #0]
 e12:	50a0      	str	r0, [r4, r2]
 e14:	3240      	adds	r2, #64	; 0x40
 e16:	5083      	str	r3, [r0, r2]
 e18:	3204      	adds	r2, #4
 e1a:	5083      	str	r3, [r0, r2]
 e1c:	2401      	movs	r4, #1
 e1e:	2d00      	cmp	r5, #0
 e20:	d0dd      	beq.n	dde <__register_exitproc+0x2e>
 e22:	009a      	lsls	r2, r3, #2
 e24:	4691      	mov	r9, r2
 e26:	4481      	add	r9, r0
 e28:	4642      	mov	r2, r8
 e2a:	2188      	movs	r1, #136	; 0x88
 e2c:	464f      	mov	r7, r9
 e2e:	507a      	str	r2, [r7, r1]
 e30:	22c4      	movs	r2, #196	; 0xc4
 e32:	0052      	lsls	r2, r2, #1
 e34:	4690      	mov	r8, r2
 e36:	4480      	add	r8, r0
 e38:	4642      	mov	r2, r8
 e3a:	3987      	subs	r1, #135	; 0x87
 e3c:	4099      	lsls	r1, r3
 e3e:	6812      	ldr	r2, [r2, #0]
 e40:	468a      	mov	sl, r1
 e42:	430a      	orrs	r2, r1
 e44:	4694      	mov	ip, r2
 e46:	4642      	mov	r2, r8
 e48:	4661      	mov	r1, ip
 e4a:	6011      	str	r1, [r2, #0]
 e4c:	2284      	movs	r2, #132	; 0x84
 e4e:	4649      	mov	r1, r9
 e50:	465f      	mov	r7, fp
 e52:	0052      	lsls	r2, r2, #1
 e54:	508f      	str	r7, [r1, r2]
 e56:	2d02      	cmp	r5, #2
 e58:	d1c1      	bne.n	dde <__register_exitproc+0x2e>
 e5a:	0002      	movs	r2, r0
 e5c:	4655      	mov	r5, sl
 e5e:	328d      	adds	r2, #141	; 0x8d
 e60:	32ff      	adds	r2, #255	; 0xff
 e62:	6811      	ldr	r1, [r2, #0]
 e64:	430d      	orrs	r5, r1
 e66:	6015      	str	r5, [r2, #0]
 e68:	e7b9      	b.n	dde <__register_exitproc+0x2e>
 e6a:	0020      	movs	r0, r4
 e6c:	304d      	adds	r0, #77	; 0x4d
 e6e:	30ff      	adds	r0, #255	; 0xff
 e70:	50e0      	str	r0, [r4, r3]
 e72:	e7ae      	b.n	dd2 <__register_exitproc+0x22>
 e74:	2001      	movs	r0, #1
 e76:	4240      	negs	r0, r0
 e78:	e7b6      	b.n	de8 <__register_exitproc+0x38>
 e7a:	46c0      	nop			; (mov r8, r8)
 e7c:	00000e8c 	.word	0x00000e8c
 e80:	00000000 	.word	0x00000000
 e84:	03e7270f 	.word	0x03e7270f
 e88:	00000043 	.word	0x00000043

00000e8c <_global_impure_ptr>:
 e8c:	20000008                                ... 

00000e90 <_init>:
 e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 e92:	46c0      	nop			; (mov r8, r8)
 e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 e96:	bc08      	pop	{r3}
 e98:	469e      	mov	lr, r3
 e9a:	4770      	bx	lr

00000e9c <__init_array_start>:
 e9c:	00000d55 	.word	0x00000d55

00000ea0 <__frame_dummy_init_array_entry>:
 ea0:	000000dd                                ....

00000ea4 <_fini>:
 ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 ea6:	46c0      	nop			; (mov r8, r8)
 ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 eaa:	bc08      	pop	{r3}
 eac:	469e      	mov	lr, r3
 eae:	4770      	bx	lr

00000eb0 <__fini_array_start>:
 eb0:	000000b5 	.word	0x000000b5
